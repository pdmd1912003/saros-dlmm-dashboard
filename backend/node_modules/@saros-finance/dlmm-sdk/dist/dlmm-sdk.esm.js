import { Connection, PublicKey, Transaction, ComputeBudgetProgram, SystemProgram, TransactionMessage } from '@solana/web3.js';
import { AnchorProvider, Program, utils, BN } from '@coral-xyz/anchor';
import { TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID, getAssociatedTokenAddressSync, createSyncNativeInstruction, createCloseAccountInstruction, createAssociatedTokenAccountInstruction } from '@solana/spl-token';
import { Buffer as Buffer$1 } from 'buffer';
import cloneDeep from 'lodash-es/cloneDeep';
import bigDecimal from 'js-big-decimal';
import { bs58 } from '@coral-xyz/anchor/dist/cjs/utils/bytes';

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function asyncGeneratorStep(n, t, e, r, o, a, c) {
  try {
    var i = n[a](c),
      u = i.value;
  } catch (n) {
    return void e(n);
  }
  i.done ? t(u) : Promise.resolve(u).then(r, o);
}
function _asyncToGenerator(n) {
  return function () {
    var t = this,
      e = arguments;
    return new Promise(function (r, o) {
      var a = n.apply(t, e);
      function _next(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
      }
      function _throw(n) {
        asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
      }
      _next(void 0);
    });
  };
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function () {
      return o >= r.length ? {
        done: !0
      } : {
        done: !1,
        value: r[o++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function () {
    return !!t;
  })();
}
function _regenerator() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
  var e,
    t,
    r = "function" == typeof Symbol ? Symbol : {},
    n = r.iterator || "@@iterator",
    o = r.toStringTag || "@@toStringTag";
  function i(r, n, o, i) {
    var c = n && n.prototype instanceof Generator ? n : Generator,
      u = Object.create(c.prototype);
    return _regeneratorDefine(u, "_invoke", function (r, n, o) {
      var i,
        c,
        u,
        f = 0,
        p = o || [],
        y = !1,
        G = {
          p: 0,
          n: 0,
          v: e,
          a: d,
          f: d.bind(e, 4),
          d: function (t, r) {
            return i = t, c = 0, u = e, G.n = r, a;
          }
        };
      function d(r, n) {
        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
          var o,
            i = p[t],
            d = G.p,
            l = i[2];
          r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0));
        }
        if (o || r > 1) return a;
        throw y = !0, n;
      }
      return function (o, p, l) {
        if (f > 1) throw TypeError("Generator is already running");
        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) {
          i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u);
          try {
            if (f = 2, i) {
              if (c || (o = "next"), t = i[o]) {
                if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object");
                if (!t.done) return t;
                u = t.value, c < 2 && (c = 0);
              } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1);
              i = e;
            } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
          } catch (t) {
            i = e, c = 1, u = t;
          } finally {
            f = 1;
          }
        }
        return {
          value: t,
          done: y
        };
      };
    }(r, o, i), !0), u;
  }
  var a = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  t = Object.getPrototypeOf;
  var c = [][n] ? t(t([][n]())) : (_regeneratorDefine(t = {}, n, function () {
      return this;
    }), t),
    u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);
  function f(e) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e;
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine(u), _regeneratorDefine(u, o, "Generator"), _regeneratorDefine(u, n, function () {
    return this;
  }), _regeneratorDefine(u, "toString", function () {
    return "[object Generator]";
  }), (_regenerator = function () {
    return {
      w: i,
      m: f
    };
  })();
}
function _regeneratorDefine(e, r, n, t) {
  var i = Object.defineProperty;
  try {
    i({}, "", {});
  } catch (e) {
    i = 0;
  }
  _regeneratorDefine = function (e, r, n, t) {
    if (r) i ? i(e, r, {
      value: n,
      enumerable: !t,
      configurable: !t,
      writable: !t
    }) : e[r] = n;else {
      function o(r, n) {
        _regeneratorDefine(e, r, function (e) {
          return this._invoke(r, n, e);
        });
      }
      o("next", 0), o("throw", 1), o("return", 2);
    }
  }, _regeneratorDefine(e, r, n, t);
}
function _regeneratorValues(e) {
  if (null != e) {
    var t = e["function" == typeof Symbol && Symbol.iterator || "@@iterator"],
      r = 0;
    if (t) return t.call(e);
    if ("function" == typeof e.next) return e;
    if (!isNaN(e.length)) return {
      next: function () {
        return e && r >= e.length && (e = void 0), {
          value: e && e[r++],
          done: !e
        };
      }
    };
  }
  throw new TypeError(typeof e + " is not iterable");
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return _wrapNativeSuper = function (t) {
    if (null === t || !_isNativeFunction(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return _construct(t, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, t);
  }, _wrapNativeSuper(t);
}

var MODE;
(function (MODE) {
  MODE["TESTNET"] = "testnet";
  MODE["DEVNET"] = "devnet";
  MODE["MAINNET"] = "mainnet";
})(MODE || (MODE = {}));

var LiquidityShape;
(function (LiquidityShape) {
  LiquidityShape["Spot"] = "Spot";
  LiquidityShape["Curve"] = "Curve";
  LiquidityShape["BidAsk"] = "BidAsk";
})(LiquidityShape || (LiquidityShape = {}));
var RemoveLiquidityType;
(function (RemoveLiquidityType) {
  RemoveLiquidityType["Both"] = "removeBoth";
  RemoveLiquidityType["BaseToken"] = "removeBaseToken";
  RemoveLiquidityType["QuoteToken"] = "removeQuoteToken";
})(RemoveLiquidityType || (RemoveLiquidityType = {}));

var _CONFIG;
var CONFIG = (_CONFIG = {}, _CONFIG[MODE.TESTNET] = {
  rpc: "https://api.testnet.solana.com"
}, _CONFIG[MODE.DEVNET] = {
  rpc: "https://api.devnet.solana.com"
}, _CONFIG[MODE.MAINNET] = {
  rpc: "https://api.mainnet-beta.solana.com"
}, _CONFIG);
var BASE_FACTOR = 8000;
var BIN_STEP = 1;
var ACTIVE_ID = 8388608;
var BIN_ARRAY_SIZE = 256;
var BIN_ARRAY_INDEX = ACTIVE_ID / BIN_ARRAY_SIZE - 1;
var MAX_BASIS_POINTS = 10000;
var FILTER_PERIOD = 30;
var DECAY_PERIOD = 600;
var REDUCTION_FACTOR = 5000;
var VARIABLE_FEE_CONTROL = 40000;
var MAX_VOLATILITY_ACCUMULATOR = 350000;
var PROTOCOL_SHARE = 2000;
var START_TIME = 1000;
var REWARDS_DURATION = 24 * 3600;
var REWARDS_PER_SECOND = /*#__PURE__*/Math.floor(100e9 / REWARDS_DURATION);
var VARIABLE_FEE_PRECISION = 100000000000;
var SCALE_OFFSET = 64;
var BASIS_POINT_MAX = 10000;
var ONE = 1 << SCALE_OFFSET;
var PRECISION = 1000000000;
var UNIT_PRICE_DEFAULT = 1000000;
var CCU_LIMIT = 400000;
var WRAP_SOL_ADDRESS = "So11111111111111111111111111111111111111112";
var FIXED_LENGTH = 16;
var BIN_STEP_CONFIGS = [{
  binStep: 1,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 10,
    decayPeriod: 120,
    reductionFactor: 5000,
    variableFeeControl: 2000000,
    maxVolatilityAccumulator: 100000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 2,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 10,
    decayPeriod: 120,
    reductionFactor: 5000,
    variableFeeControl: 500000,
    maxVolatilityAccumulator: 250000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 5,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 30,
    decayPeriod: 600,
    reductionFactor: 5000,
    variableFeeControl: 120000,
    maxVolatilityAccumulator: 300000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 10,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 30,
    decayPeriod: 600,
    reductionFactor: 5000,
    variableFeeControl: 40000,
    maxVolatilityAccumulator: 350000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 20,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 30,
    decayPeriod: 600,
    reductionFactor: 5000,
    variableFeeControl: 20000,
    maxVolatilityAccumulator: 350000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 50,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 120,
    decayPeriod: 1200,
    reductionFactor: 5000,
    variableFeeControl: 10000,
    maxVolatilityAccumulator: 250000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 100,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 300,
    decayPeriod: 1200,
    reductionFactor: 5000,
    variableFeeControl: 7500,
    maxVolatilityAccumulator: 150000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 200,
  feeParameters: {
    baseFactor: 10000,
    filterPeriod: 300,
    decayPeriod: 1200,
    reductionFactor: 5000,
    variableFeeControl: 7500,
    maxVolatilityAccumulator: 150000,
    protocolShare: 2000,
    space: [0, 0]
  }
}, {
  binStep: 250,
  feeParameters: {
    baseFactor: 20000,
    filterPeriod: 300,
    decayPeriod: 1200,
    reductionFactor: 5000,
    variableFeeControl: 7500,
    maxVolatilityAccumulator: 150000,
    protocolShare: 2000,
    space: [0, 0]
  }
}];

var address = "1qbkdrr3z4ryLA7pZykqxvxWPoeifcVKo6ZG9CfkvVE";
var metadata = {
	name: "liquidity_book",
	version: "0.1.0",
	spec: "0.1.0",
	description: "Created with Anchor"
};
var instructions = [
	{
		name: "accept_config_ownership",
		discriminator: [
			6,
			212,
			14,
			48,
			229,
			38,
			62,
			241
		],
		accounts: [
			{
				name: "liquidity_book_config",
				writable: true
			},
			{
				name: "pending_preset_authority",
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "close_position",
		discriminator: [
			123,
			134,
			81,
			0,
			49,
			68,
			98,
			98
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"position",
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_mint",
				writable: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "position_token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "create_position",
		discriminator: [
			48,
			215,
			197,
			153,
			96,
			203,
			180,
			133
		],
		accounts: [
			{
				name: "pair"
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "position_mint"
						}
					]
				}
			},
			{
				name: "position_mint",
				writable: true,
				signer: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "associated_token_program",
				address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "relative_bin_id_left",
				type: "i32"
			},
			{
				name: "relative_bin_in_right",
				type: "i32"
			}
		]
	},
	{
		name: "decrease_position",
		discriminator: [
			57,
			125,
			21,
			59,
			200,
			137,
			179,
			108
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"position",
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_mint",
				writable: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "position_token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "shares",
				type: {
					vec: "u128"
				}
			}
		]
	},
	{
		name: "increase_position",
		discriminator: [
			253,
			234,
			128,
			104,
			192,
			188,
			45,
			91
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"position",
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_mint",
				writable: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "position_token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "amount_x",
				type: "u64"
			},
			{
				name: "amount_y",
				type: "u64"
			},
			{
				name: "liquidity_distribution",
				type: {
					vec: {
						defined: {
							name: "BinLiquidityDistribution"
						}
					}
				}
			}
		]
	},
	{
		name: "initialize_bin_array",
		discriminator: [
			35,
			86,
			19,
			185,
			78,
			212,
			75,
			211
		],
		accounts: [
			{
				name: "pair"
			},
			{
				name: "bin_array",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								97,
								114,
								114,
								97,
								121
							]
						},
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "arg",
							path: "index"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "id",
				type: "u32"
			}
		]
	},
	{
		name: "initialize_bin_step_config",
		discriminator: [
			2,
			168,
			136,
			251,
			163,
			9,
			132,
			255
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "bin_step_config",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								115,
								116,
								101,
								112,
								95,
								99,
								111,
								110,
								102,
								105,
								103
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "arg",
							path: "bin_step"
						}
					]
				}
			},
			{
				name: "preset_authority",
				writable: true,
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "bin_step",
				type: "u8"
			},
			{
				name: "availability",
				type: {
					defined: {
						name: "ConfigAvailability"
					}
				}
			},
			{
				name: "fee_parameters",
				type: {
					defined: {
						name: "StaticFeeParameters"
					}
				}
			}
		]
	},
	{
		name: "initialize_config",
		discriminator: [
			208,
			127,
			21,
			1,
			194,
			190,
			196,
			70
		],
		accounts: [
			{
				name: "config",
				writable: true,
				signer: true
			},
			{
				name: "payer",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "fee_authority",
				type: "pubkey"
			}
		]
	},
	{
		name: "initialize_pair",
		discriminator: [
			177,
			114,
			226,
			34,
			186,
			150,
			5,
			245
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "token_mint_x"
			},
			{
				name: "token_mint_y"
			},
			{
				name: "bin_step_config",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								115,
								116,
								101,
								112,
								95,
								99,
								111,
								110,
								102,
								105,
								103
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "bin_step_config.bin_step",
							account: "BinStepConfig"
						}
					]
				}
			},
			{
				name: "quote_asset_badge",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								113,
								117,
								111,
								116,
								101,
								95,
								97,
								115,
								115,
								101,
								116,
								95,
								98,
								97,
								100,
								103,
								101
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint_y"
						}
					]
				}
			},
			{
				name: "pair",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								97,
								105,
								114
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint_x"
						},
						{
							kind: "account",
							path: "token_mint_y"
						},
						{
							kind: "account",
							path: "bin_step_config.bin_step",
							account: "BinStepConfig"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "active_id",
				type: "u32"
			}
		]
	},
	{
		name: "initialize_quote_asset_badge",
		discriminator: [
			115,
			174,
			34,
			42,
			176,
			5,
			229,
			207
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "quote_asset_badge",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								113,
								117,
								111,
								116,
								101,
								95,
								97,
								115,
								115,
								101,
								116,
								95,
								98,
								97,
								100,
								103,
								101
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint"
						}
					]
				}
			},
			{
				name: "token_mint"
			},
			{
				name: "preset_authority",
				writable: true,
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "set_hook",
		discriminator: [
			175,
			16,
			187,
			252,
			19,
			54,
			111,
			221
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"pair"
				]
			},
			{
				name: "pair",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			}
		],
		args: [
		]
	},
	{
		name: "swap",
		discriminator: [
			248,
			198,
			158,
			145,
			225,
			117,
			135,
			200
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true
			},
			{
				name: "user_vault_y",
				writable: true
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "amount",
				type: "u64"
			},
			{
				name: "other_amount_threshold",
				type: "u64"
			},
			{
				name: "swap_for_y",
				type: "bool"
			},
			{
				name: "swap_type",
				type: {
					defined: {
						name: "SwapType"
					}
				}
			}
		]
	},
	{
		name: "transfer_config_ownership",
		discriminator: [
			53,
			124,
			67,
			226,
			108,
			130,
			19,
			12
		],
		accounts: [
			{
				name: "liquidity_book_config",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "new_authority",
				type: {
					option: "pubkey"
				}
			}
		]
	},
	{
		name: "update_bin_step_config",
		discriminator: [
			205,
			204,
			206,
			220,
			251,
			239,
			19,
			238
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"bin_step_config"
				]
			},
			{
				name: "bin_step_config",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "status",
				type: {
					defined: {
						name: "ConfigStatus"
					}
				}
			},
			{
				name: "availability",
				type: {
					defined: {
						name: "ConfigAvailability"
					}
				}
			},
			{
				name: "fee_parameters",
				type: {
					defined: {
						name: "StaticFeeParameters"
					}
				}
			}
		]
	},
	{
		name: "update_pair_static_fee_parameters",
		discriminator: [
			20,
			223,
			186,
			73,
			199,
			65,
			45,
			80
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"pair"
				]
			},
			{
				name: "pair",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "fee_parameters",
				type: {
					defined: {
						name: "StaticFeeParameters"
					}
				}
			}
		]
	},
	{
		name: "update_quote_asset_badge",
		discriminator: [
			42,
			12,
			208,
			17,
			29,
			174,
			196,
			103
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "quote_asset_badge",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								113,
								117,
								111,
								116,
								101,
								95,
								97,
								115,
								115,
								101,
								116,
								95,
								98,
								97,
								100,
								103,
								101
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint"
						}
					]
				}
			},
			{
				name: "token_mint"
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "status",
				type: {
					defined: {
						name: "QuoteAssetBadgeStatus"
					}
				}
			}
		]
	},
	{
		name: "withdraw_protocol_fees",
		discriminator: [
			11,
			68,
			165,
			98,
			18,
			208,
			134,
			73
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"pair"
				]
			},
			{
				name: "pair",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "protocol_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "preset_authority"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "protocol_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "preset_authority"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	}
];
var accounts = [
	{
		name: "BinArray",
		discriminator: [
			92,
			142,
			92,
			220,
			5,
			148,
			70,
			181
		]
	},
	{
		name: "BinStepConfig",
		discriminator: [
			44,
			12,
			82,
			45,
			127,
			124,
			191,
			199
		]
	},
	{
		name: "LiquidityBookConfig",
		discriminator: [
			173,
			36,
			130,
			129,
			45,
			178,
			44,
			86
		]
	},
	{
		name: "Pair",
		discriminator: [
			85,
			72,
			49,
			176,
			182,
			228,
			141,
			82
		]
	},
	{
		name: "Position",
		discriminator: [
			170,
			188,
			143,
			228,
			122,
			64,
			247,
			208
		]
	},
	{
		name: "QuoteAssetBadge",
		discriminator: [
			183,
			124,
			99,
			219,
			110,
			119,
			157,
			221
		]
	}
];
var events = [
	{
		name: "BinArrayInitializationEvent",
		discriminator: [
			237,
			158,
			3,
			184,
			253,
			238,
			102,
			71
		]
	},
	{
		name: "BinStepConfigInitializationEvent",
		discriminator: [
			2,
			138,
			209,
			132,
			61,
			232,
			124,
			57
		]
	},
	{
		name: "BinStepConfigUpdateEvent",
		discriminator: [
			241,
			69,
			172,
			53,
			135,
			27,
			238,
			248
		]
	},
	{
		name: "BinSwapEvent",
		discriminator: [
			55,
			42,
			192,
			194,
			230,
			243,
			9,
			72
		]
	},
	{
		name: "CompositionFeesEvent",
		discriminator: [
			83,
			234,
			249,
			47,
			88,
			125,
			2,
			86
		]
	},
	{
		name: "LiquidityBookConfigInitializationEvent",
		discriminator: [
			90,
			99,
			66,
			116,
			24,
			72,
			145,
			146
		]
	},
	{
		name: "LiquidityBookConfigTransferOwnershipEvent",
		discriminator: [
			181,
			131,
			103,
			224,
			188,
			170,
			226,
			65
		]
	},
	{
		name: "LiquidityBookConfigTransferOwnershipInitEvent",
		discriminator: [
			69,
			165,
			109,
			99,
			223,
			38,
			229,
			100
		]
	},
	{
		name: "PairInitializationEvent",
		discriminator: [
			132,
			133,
			209,
			222,
			229,
			215,
			206,
			245
		]
	},
	{
		name: "PairStaticFeeParametersUpdateEvent",
		discriminator: [
			57,
			109,
			202,
			252,
			154,
			9,
			121,
			131
		]
	},
	{
		name: "PositionCreationEvent",
		discriminator: [
			97,
			21,
			205,
			201,
			62,
			41,
			111,
			164
		]
	},
	{
		name: "PositionDecreaseEvent",
		discriminator: [
			200,
			116,
			151,
			126,
			182,
			237,
			245,
			254
		]
	},
	{
		name: "PositionIncreaseEvent",
		discriminator: [
			247,
			40,
			58,
			113,
			28,
			175,
			60,
			174
		]
	},
	{
		name: "ProtocolFeesCollectionEvent",
		discriminator: [
			196,
			36,
			190,
			66,
			172,
			52,
			142,
			15
		]
	},
	{
		name: "QuoteAssetBadgeInitializationEvent",
		discriminator: [
			202,
			110,
			93,
			186,
			165,
			96,
			200,
			27
		]
	},
	{
		name: "QuoteAssetBadgeUpdateEvent",
		discriminator: [
			102,
			149,
			171,
			236,
			123,
			73,
			205,
			194
		]
	}
];
var errors = [
	{
		code: 6000,
		name: "BinNotFound",
		msg: "Bin not found within bin array"
	},
	{
		code: 6001,
		name: "InvalidAuthority",
		msg: "Invalid authority"
	},
	{
		code: 6002,
		name: "InvalidAmounts",
		msg: "Invalid amounts length"
	},
	{
		code: 6003,
		name: "BinArrayIndexMismatch",
		msg: "Bin array index mismatch"
	},
	{
		code: 6004,
		name: "InvalidAmountOut",
		msg: "Invalid amount out"
	},
	{
		code: 6005,
		name: "InvalidAmountIn",
		msg: "Invalid amount in"
	},
	{
		code: 6006,
		name: "InvalidDistribution",
		msg: "Invalid distribution"
	},
	{
		code: 6007,
		name: "LiquidityOverflow",
		msg: "Liquidity overflow"
	},
	{
		code: 6008,
		name: "LiquidityUnderflow",
		msg: "Liquidity underflow"
	},
	{
		code: 6009,
		name: "ZeroShares",
		msg: "Zero shares"
	},
	{
		code: 6010,
		name: "NotPositionOwner",
		msg: "Not the owner of the position"
	},
	{
		code: 6011,
		name: "InvalidStaticFeeParameters",
		msg: "Invalid static fee parameters"
	},
	{
		code: 6012,
		name: "InvalidConfig",
		msg: "Invalid LB config provided"
	},
	{
		code: 6013,
		name: "PairPositionMismatch",
		msg: "Pair and position mismatch"
	},
	{
		code: 6014,
		name: "PairLowerBinArrayMismatch",
		msg: "Pair and lower bin array mismatch"
	},
	{
		code: 6015,
		name: "PairUpperBinArrayMismatch",
		msg: "Pair and upper bin array mismatch"
	},
	{
		code: 6016,
		name: "InactiveBinStepConfig",
		msg: "Inactive bin step config"
	},
	{
		code: 6017,
		name: "ClosedBinStepConfig",
		msg: "Closed bin step config"
	},
	{
		code: 6018,
		name: "InvalidQuoteAssetBadge",
		msg: "Invalid quote asset badge provided"
	},
	{
		code: 6019,
		name: "TransferFeeCalculationError",
		msg: "Transfer fee calculation error"
	},
	{
		code: 6020,
		name: "GetAmountOverflow",
		msg: "Get amount overflow error"
	},
	{
		code: 6021,
		name: "AmountOverflow",
		msg: "Amount overflow error"
	},
	{
		code: 6022,
		name: "AmountUnderflow",
		msg: "Amount underflow error"
	},
	{
		code: 6023,
		name: "ActiveIdOverflow",
		msg: "Active id overflow error"
	},
	{
		code: 6024,
		name: "ActiveIdUnderflow",
		msg: "Active id overflow error"
	},
	{
		code: 6025,
		name: "InvalidBinRange",
		msg: "Invalid bin range"
	},
	{
		code: 6026,
		name: "PairTokenMismatch",
		msg: "Pair Token Mismatch"
	},
	{
		code: 6027,
		name: "InvalidHook",
		msg: "Invalid Hook Provided"
	},
	{
		code: 6028,
		name: "UserVaultXMismatch",
		msg: "Token Account X Mismatch"
	},
	{
		code: 6029,
		name: "UserVaultYMismatch",
		msg: "Token Account Y Mismatch"
	}
];
var types = [
	{
		name: "Bin",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "total_supply",
					type: "u128"
				},
				{
					name: "reserve_x",
					type: "u64"
				},
				{
					name: "reserve_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "BinArray",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "bins",
					type: {
						array: [
							{
								defined: {
									name: "Bin"
								}
							},
							256
						]
					}
				},
				{
					name: "index",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							12
						]
					}
				}
			]
		}
	},
	{
		name: "BinArrayInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "index",
					type: "u32"
				}
			]
		}
	},
	{
		name: "BinLiquidityDistribution",
		type: {
			kind: "struct",
			fields: [
				{
					name: "relative_bin_id",
					type: "i32"
				},
				{
					name: "distribution_x",
					type: "u16"
				},
				{
					name: "distribution_y",
					type: "u16"
				}
			]
		}
	},
	{
		name: "BinStepConfig",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: "u8"
				},
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "ConfigStatus"
						}
					}
				},
				{
					name: "availability",
					type: {
						defined: {
							name: "ConfigAvailability"
						}
					}
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "BinStepConfigInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "BinStepConfigUpdateEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bin_step_config",
					type: "pubkey"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "ConfigStatus"
						}
					}
				},
				{
					name: "availability",
					type: {
						defined: {
							name: "ConfigAvailability"
						}
					}
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "BinSwapEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "swap_for_y",
					type: "bool"
				},
				{
					name: "protocol_fee",
					type: "u64"
				},
				{
					name: "bin_id",
					type: "u32"
				},
				{
					name: "amount_in",
					type: "u64"
				},
				{
					name: "amount_out",
					type: "u64"
				},
				{
					name: "volatility_accumulator",
					type: "u32"
				},
				{
					name: "fee",
					type: "u64"
				}
			]
		}
	},
	{
		name: "CompositionFeesEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "active_id",
					type: "u32"
				},
				{
					name: "composition_fees_x",
					type: "u64"
				},
				{
					name: "composition_fees_y",
					type: "u64"
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "ConfigAvailability",
		type: {
			kind: "enum",
			variants: [
				{
					name: "Closed"
				},
				{
					name: "Open"
				}
			]
		}
	},
	{
		name: "ConfigStatus",
		type: {
			kind: "enum",
			variants: [
				{
					name: "Inactive"
				},
				{
					name: "Active"
				}
			]
		}
	},
	{
		name: "DynamicFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "time_last_updated",
					type: "u64"
				},
				{
					name: "volatility_accumulator",
					type: "u32"
				},
				{
					name: "volatility_reference",
					type: "u32"
				},
				{
					name: "id_reference",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							4
						]
					}
				}
			]
		}
	},
	{
		name: "LiquidityBookConfig",
		type: {
			kind: "struct",
			fields: [
				{
					name: "preset_authority",
					type: "pubkey"
				},
				{
					name: "pending_preset_authority",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "LiquidityBookConfigInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "config",
					type: "pubkey"
				},
				{
					name: "preset_authority",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "LiquidityBookConfigTransferOwnershipEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "new_authority",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "LiquidityBookConfigTransferOwnershipInitEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "new_pending_authority",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "Pair",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "bin_step_seed",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "token_mint_x",
					type: "pubkey"
				},
				{
					name: "token_mint_y",
					type: "pubkey"
				},
				{
					name: "static_fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				},
				{
					name: "active_id",
					type: "u32"
				},
				{
					name: "dynamic_fee_parameters",
					type: {
						defined: {
							name: "DynamicFeeParameters"
						}
					}
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				},
				{
					name: "hook",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "PairInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "token_mint_x",
					type: "pubkey"
				},
				{
					name: "token_mint_y",
					type: "pubkey"
				},
				{
					name: "bin_step_config",
					type: "pubkey"
				},
				{
					name: "active_id",
					type: "u32"
				}
			]
		}
	},
	{
		name: "PairStaticFeeParametersUpdateEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "Position",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position_mint",
					type: "pubkey"
				},
				{
					name: "liquidity_shares",
					type: {
						array: [
							"u128",
							64
						]
					}
				},
				{
					name: "lower_bin_id",
					type: "u32"
				},
				{
					name: "upper_bin_id",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							8
						]
					}
				}
			]
		}
	},
	{
		name: "PositionCreationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "position_mint",
					type: "pubkey"
				},
				{
					name: "lower_bin_id",
					type: "u32"
				},
				{
					name: "upper_bin_id",
					type: "u32"
				}
			]
		}
	},
	{
		name: "PositionDecreaseEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "bin_ids",
					type: {
						vec: "u32"
					}
				},
				{
					name: "amounts_x",
					type: {
						vec: "u64"
					}
				},
				{
					name: "amounts_y",
					type: {
						vec: "u64"
					}
				},
				{
					name: "liquidity_burned",
					type: {
						vec: "u128"
					}
				}
			]
		}
	},
	{
		name: "PositionIncreaseEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "bin_ids",
					type: {
						vec: "u32"
					}
				},
				{
					name: "amounts_x",
					type: {
						vec: "u64"
					}
				},
				{
					name: "amounts_y",
					type: {
						vec: "u64"
					}
				},
				{
					name: "liquidity_minted",
					type: {
						vec: "u128"
					}
				}
			]
		}
	},
	{
		name: "ProtocolFeesCollectionEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "QuoteAssetBadge",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: "u8"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "QuoteAssetBadgeStatus"
						}
					}
				}
			]
		}
	},
	{
		name: "QuoteAssetBadgeInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "quote_asset_badge",
					type: "pubkey"
				},
				{
					name: "token_mint",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "QuoteAssetBadgeStatus",
		type: {
			kind: "enum",
			variants: [
				{
					name: "Disabled"
				},
				{
					name: "Enabled"
				}
			]
		}
	},
	{
		name: "QuoteAssetBadgeUpdateEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "quote_asset_badge",
					type: "pubkey"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "QuoteAssetBadgeStatus"
						}
					}
				}
			]
		}
	},
	{
		name: "StaticFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "base_factor",
					type: "u16"
				},
				{
					name: "filter_period",
					type: "u16"
				},
				{
					name: "decay_period",
					type: "u16"
				},
				{
					name: "reduction_factor",
					type: "u16"
				},
				{
					name: "variable_fee_control",
					type: "u32"
				},
				{
					name: "max_volatility_accumulator",
					type: "u32"
				},
				{
					name: "protocol_share",
					type: "u16"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							2
						]
					}
				}
			]
		}
	},
	{
		name: "SwapType",
		type: {
			kind: "enum",
			variants: [
				{
					name: "ExactInput"
				},
				{
					name: "ExactOutput"
				}
			]
		}
	}
];
var LiquidityBookIDL = {
	address: address,
	metadata: metadata,
	instructions: instructions,
	accounts: accounts,
	events: events,
	errors: errors,
	types: types
};

var address$1 = "mdmavMvJpF4ZcLJNg6VSjuKVMiBo5uKwERTg1ZB9yUH";
var metadata$1 = {
	name: "rewarder_hook",
	version: "0.1.0",
	spec: "0.1.0",
	description: "Created with Anchor"
};
var instructions$1 = [
	{
		name: "before_burn",
		discriminator: [
			7,
			177,
			19,
			160,
			28,
			229,
			57,
			73
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper",
					"position_hook_bin_array_lower",
					"position_hook_bin_array_upper"
				]
			},
			{
				name: "position"
			},
			{
				name: "active_bin_array_lower"
			},
			{
				name: "active_bin_array_upper"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "position"
						}
					]
				}
			},
			{
				name: "position_hook_bin_array_lower",
				writable: true
			},
			{
				name: "position_hook_bin_array_upper",
				writable: true
			}
		],
		args: [
		]
	},
	{
		name: "before_mint",
		discriminator: [
			67,
			27,
			57,
			7,
			28,
			168,
			109,
			153
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper",
					"position_hook_bin_array_lower",
					"position_hook_bin_array_upper"
				]
			},
			{
				name: "position"
			},
			{
				name: "active_bin_array_lower"
			},
			{
				name: "active_bin_array_upper"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "position"
						}
					]
				}
			},
			{
				name: "position_hook_bin_array_lower",
				writable: true
			},
			{
				name: "position_hook_bin_array_upper",
				writable: true
			}
		],
		args: [
		]
	},
	{
		name: "before_swap",
		discriminator: [
			227,
			59,
			240,
			68,
			164,
			9,
			29,
			254
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower"
			},
			{
				name: "active_bin_array_upper"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			}
		],
		args: [
		]
	},
	{
		name: "claim",
		discriminator: [
			62,
			198,
			214,
			193,
			213,
			159,
			108,
			210
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper",
					"position_hook_bin_array_lower",
					"position_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"position",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "position"
			},
			{
				name: "position_mint",
				relations: [
					"position"
				]
			},
			{
				name: "position_token_account",
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "position"
						}
					]
				}
			},
			{
				name: "position_hook_bin_array_lower",
				writable: true
			},
			{
				name: "position_hook_bin_array_upper",
				writable: true
			},
			{
				name: "reward_token_mint"
			},
			{
				name: "hook_reserve",
				writable: true,
				relations: [
					"hook"
				]
			},
			{
				name: "user_reserve",
				writable: true
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "reward_token_program"
			},
			{
				name: "position_token_program"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "initialize_bin_array",
		discriminator: [
			35,
			86,
			19,
			185,
			78,
			212,
			75,
			211
		],
		accounts: [
			{
				name: "hook"
			},
			{
				name: "bin_array",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								97,
								114,
								114,
								97,
								121
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "arg",
							path: "index"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "index",
				type: "u32"
			}
		]
	},
	{
		name: "initialize_hook",
		discriminator: [
			37,
			101,
			119,
			255,
			156,
			39,
			252,
			232
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								104,
								111,
								111,
								107
							]
						},
						{
							kind: "account",
							path: "hook_authority"
						},
						{
							kind: "arg",
							path: "pair"
						}
					]
				}
			},
			{
				name: "reward_token_mint"
			},
			{
				name: "hook_reserve",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "reward_token_mint_token_program"
						},
						{
							kind: "account",
							path: "reward_token_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "hook_authority",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "associated_token_program",
				address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
			},
			{
				name: "reward_token_mint_token_program"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "lb_pair",
				type: "pubkey"
			}
		]
	},
	{
		name: "initialize_position",
		discriminator: [
			219,
			192,
			234,
			71,
			190,
			191,
			102,
			80
		],
		accounts: [
			{
				name: "hook"
			},
			{
				name: "lb_position"
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "lb_position"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "on_hook_set",
		discriminator: [
			23,
			126,
			214,
			186,
			197,
			123,
			0,
			235
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			}
		],
		args: [
		]
	},
	{
		name: "set_reward_range",
		discriminator: [
			124,
			43,
			236,
			120,
			6,
			88,
			112,
			213
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_reserve",
				relations: [
					"hook"
				]
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "delta_bin_a",
				type: "i32"
			},
			{
				name: "delta_bin_b",
				type: "i32"
			}
		]
	},
	{
		name: "set_rewards_parameters",
		discriminator: [
			86,
			145,
			230,
			205,
			136,
			137,
			140,
			193
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_reserve",
				relations: [
					"hook"
				]
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "rewards_per_second",
				type: "u64"
			},
			{
				name: "start_time",
				type: "i64"
			},
			{
				name: "duration",
				type: "i64"
			}
		]
	},
	{
		name: "set_rewards_per_second",
		discriminator: [
			77,
			81,
			53,
			27,
			248,
			29,
			133,
			203
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_reserve",
				relations: [
					"hook"
				]
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "rewards_per_second",
				type: "u64"
			},
			{
				name: "duration",
				type: "i64"
			}
		]
	},
	{
		name: "sweep",
		discriminator: [
			40,
			23,
			234,
			175,
			14,
			61,
			154,
			177
		],
		accounts: [
			{
				name: "hook",
				writable: true
			},
			{
				name: "reward_token_mint"
			},
			{
				name: "hook_reserve",
				writable: true,
				relations: [
					"hook"
				]
			},
			{
				name: "authority_reserve",
				writable: true
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "reward_token_program"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			}
		],
		args: [
		]
	}
];
var accounts$1 = [
	{
		name: "BinArray",
		discriminator: [
			92,
			142,
			92,
			220,
			5,
			148,
			70,
			181
		]
	},
	{
		name: "Hook",
		discriminator: [
			125,
			61,
			76,
			173,
			200,
			161,
			92,
			217
		]
	},
	{
		name: "HookBinArray",
		discriminator: [
			103,
			134,
			57,
			58,
			74,
			234,
			9,
			157
		]
	},
	{
		name: "HookPosition",
		discriminator: [
			125,
			149,
			132,
			62,
			52,
			71,
			211,
			143
		]
	},
	{
		name: "Pair",
		discriminator: [
			85,
			72,
			49,
			176,
			182,
			228,
			141,
			82
		]
	},
	{
		name: "Position",
		discriminator: [
			170,
			188,
			143,
			228,
			122,
			64,
			247,
			208
		]
	}
];
var events$1 = [
	{
		name: "ClaimEvent",
		discriminator: [
			93,
			15,
			70,
			170,
			48,
			140,
			212,
			219
		]
	},
	{
		name: "DeltaBinSetEvent",
		discriminator: [
			0,
			208,
			34,
			219,
			151,
			91,
			139,
			244
		]
	},
	{
		name: "HookInitializationEvent",
		discriminator: [
			229,
			217,
			175,
			38,
			112,
			240,
			117,
			95
		]
	},
	{
		name: "RewardParametersSetEvent",
		discriminator: [
			191,
			11,
			46,
			163,
			150,
			8,
			126,
			245
		]
	}
];
var errors$1 = [
	{
		code: 6000,
		name: "CheckedAddSignedOverflow",
		msg: "Checked add signed overflow"
	},
	{
		code: 6001,
		name: "CheckedAddOverflow",
		msg: "Checked add overflow"
	},
	{
		code: 6002,
		name: "HookBinArrayIndexMismatch",
		msg: "Hook bin array index mismatch"
	},
	{
		code: 6003,
		name: "BinNotFound",
		msg: "Bin not found"
	},
	{
		code: 6004,
		name: "ShlDivError",
		msg: "Shift left division error"
	},
	{
		code: 6005,
		name: "MulDivError",
		msg: "Mul div error"
	},
	{
		code: 6006,
		name: "MulShrError",
		msg: "Mul shr error"
	},
	{
		code: 6007,
		name: "CheckedMulOverflow",
		msg: "Checked Mul overflow"
	},
	{
		code: 6008,
		name: "InvalidStartTime",
		msg: "Invalid start time"
	},
	{
		code: 6009,
		name: "CheckedSubUnderflow",
		msg: "Checked sub underflow"
	},
	{
		code: 6010,
		name: "ZeroRewards",
		msg: "Rewarder won't distribute any rewards"
	},
	{
		code: 6011,
		name: "InvalidDeltaBins",
		msg: "Invalid delta bins"
	},
	{
		code: 6012,
		name: "InvalidLBPosition",
		msg: "Invalid LB position"
	}
];
var types$1 = [
	{
		name: "Bin",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "total_supply",
					type: "u128"
				},
				{
					name: "reserve_x",
					type: "u64"
				},
				{
					name: "reserve_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "BinArray",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "bins",
					type: {
						array: [
							{
								defined: {
									name: "Bin"
								}
							},
							256
						]
					}
				},
				{
					name: "index",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							12
						]
					}
				}
			]
		}
	},
	{
		name: "ClaimEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "user",
					type: "pubkey"
				},
				{
					name: "rewards",
					type: "u64"
				}
			]
		}
	},
	{
		name: "DeltaBinSetEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "delta_bin_a",
					type: "i32"
				},
				{
					name: "delta_bin_b",
					type: "i32"
				}
			]
		}
	},
	{
		name: "DynamicFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "time_last_updated",
					type: "u64"
				},
				{
					name: "volatility_accumulator",
					type: "u32"
				},
				{
					name: "volatility_reference",
					type: "u32"
				},
				{
					name: "id_reference",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							4
						]
					}
				}
			]
		}
	},
	{
		name: "Hook",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "authority",
					type: "pubkey"
				},
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "reward_token_mint",
					type: "pubkey"
				},
				{
					name: "hook_reserve",
					type: "pubkey"
				},
				{
					name: "rewards_per_second",
					type: "u64"
				},
				{
					name: "end_time",
					type: "i64"
				},
				{
					name: "last_update",
					type: "i64"
				},
				{
					name: "delta_bin_a",
					type: "i32"
				},
				{
					name: "delta_bin_b",
					type: "i32"
				},
				{
					name: "total_unclaimed_rewards",
					type: "u64"
				}
			]
		}
	},
	{
		name: "HookBinArray",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "index",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							28
						]
					}
				},
				{
					name: "accrued_rewards_per_share",
					type: {
						array: [
							"u128",
							256
						]
					}
				}
			]
		}
	},
	{
		name: "HookInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "authority",
					type: "pubkey"
				},
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "hook",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "HookPosition",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "user_accrued_rewards_per_share",
					type: {
						array: [
							"u128",
							64
						]
					}
				},
				{
					name: "pending_rewards",
					type: "u64"
				},
				{
					name: "bump",
					type: "u8"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							7
						]
					}
				}
			]
		}
	},
	{
		name: "Pair",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "bin_step_seed",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "token_mint_x",
					type: "pubkey"
				},
				{
					name: "token_mint_y",
					type: "pubkey"
				},
				{
					name: "static_fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				},
				{
					name: "active_id",
					type: "u32"
				},
				{
					name: "dynamic_fee_parameters",
					type: {
						defined: {
							name: "DynamicFeeParameters"
						}
					}
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				},
				{
					name: "hook",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "Position",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position_mint",
					type: "pubkey"
				},
				{
					name: "liquidity_shares",
					type: {
						array: [
							"u128",
							64
						]
					}
				},
				{
					name: "lower_bin_id",
					type: "u32"
				},
				{
					name: "upper_bin_id",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							8
						]
					}
				}
			]
		}
	},
	{
		name: "RewardParametersSetEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "rewards_per_second",
					type: "u64"
				},
				{
					name: "start_time",
					type: "i64"
				},
				{
					name: "duration",
					type: "i64"
				}
			]
		}
	},
	{
		name: "StaticFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "base_factor",
					type: "u16"
				},
				{
					name: "filter_period",
					type: "u16"
				},
				{
					name: "decay_period",
					type: "u16"
				},
				{
					name: "reduction_factor",
					type: "u16"
				},
				{
					name: "variable_fee_control",
					type: "u32"
				},
				{
					name: "max_volatility_accumulator",
					type: "u32"
				},
				{
					name: "protocol_share",
					type: "u16"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							2
						]
					}
				}
			]
		}
	}
];
var MdmaIDL = {
	address: address$1,
	metadata: metadata$1,
	instructions: instructions$1,
	accounts: accounts$1,
	events: events$1,
	errors: errors$1,
	types: types$1
};

var address$2 = "2Qy2sxJpWYsN35D54LgHE6M5ATZMnnim7nPwSGyffFAa";
var metadata$2 = {
	name: "liquidity_book",
	version: "0.1.0",
	spec: "0.1.0",
	description: "Created with Anchor"
};
var instructions$2 = [
	{
		name: "accept_config_ownership",
		discriminator: [
			6,
			212,
			14,
			48,
			229,
			38,
			62,
			241
		],
		accounts: [
			{
				name: "liquidity_book_config",
				writable: true
			},
			{
				name: "pending_preset_authority",
				signer: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "close_position",
		discriminator: [
			123,
			134,
			81,
			0,
			49,
			68,
			98,
			98
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"position",
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_mint",
				writable: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "position_token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "create_position",
		discriminator: [
			48,
			215,
			197,
			153,
			96,
			203,
			180,
			133
		],
		accounts: [
			{
				name: "pair"
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "position_mint"
						}
					]
				}
			},
			{
				name: "position_mint",
				writable: true,
				signer: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "associated_token_program",
				address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "relative_bin_id_left",
				type: "i32"
			},
			{
				name: "relative_bin_in_right",
				type: "i32"
			}
		]
	},
	{
		name: "decrease_position",
		discriminator: [
			57,
			125,
			21,
			59,
			200,
			137,
			179,
			108
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"position",
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_mint",
				writable: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "position_token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "shares",
				type: {
					vec: "u128"
				}
			}
		]
	},
	{
		name: "increase_position",
		discriminator: [
			253,
			234,
			128,
			104,
			192,
			188,
			45,
			91
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"position",
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "position",
				writable: true
			},
			{
				name: "position_mint",
				writable: true
			},
			{
				name: "position_token_account",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "position_token_program",
				address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "amount_x",
				type: "u64"
			},
			{
				name: "amount_y",
				type: "u64"
			},
			{
				name: "liquidity_distribution",
				type: {
					vec: {
						defined: {
							name: "BinLiquidityDistribution"
						}
					}
				}
			}
		]
	},
	{
		name: "initialize_bin_array",
		discriminator: [
			35,
			86,
			19,
			185,
			78,
			212,
			75,
			211
		],
		accounts: [
			{
				name: "pair"
			},
			{
				name: "bin_array",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								97,
								114,
								114,
								97,
								121
							]
						},
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "arg",
							path: "index"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "id",
				type: "u32"
			}
		]
	},
	{
		name: "initialize_bin_step_config",
		discriminator: [
			2,
			168,
			136,
			251,
			163,
			9,
			132,
			255
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "bin_step_config",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								115,
								116,
								101,
								112,
								95,
								99,
								111,
								110,
								102,
								105,
								103
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "arg",
							path: "bin_step"
						}
					]
				}
			},
			{
				name: "preset_authority",
				writable: true,
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "bin_step",
				type: "u8"
			},
			{
				name: "availability",
				type: {
					defined: {
						name: "ConfigAvailability"
					}
				}
			},
			{
				name: "fee_parameters",
				type: {
					defined: {
						name: "StaticFeeParameters"
					}
				}
			}
		]
	},
	{
		name: "initialize_config",
		discriminator: [
			208,
			127,
			21,
			1,
			194,
			190,
			196,
			70
		],
		accounts: [
			{
				name: "config",
				writable: true,
				signer: true
			},
			{
				name: "payer",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "fee_authority",
				type: "pubkey"
			}
		]
	},
	{
		name: "initialize_pair",
		discriminator: [
			177,
			114,
			226,
			34,
			186,
			150,
			5,
			245
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "token_mint_x"
			},
			{
				name: "token_mint_y"
			},
			{
				name: "bin_step_config",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								115,
								116,
								101,
								112,
								95,
								99,
								111,
								110,
								102,
								105,
								103
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "bin_step_config.bin_step",
							account: "BinStepConfig"
						}
					]
				}
			},
			{
				name: "quote_asset_badge",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								113,
								117,
								111,
								116,
								101,
								95,
								97,
								115,
								115,
								101,
								116,
								95,
								98,
								97,
								100,
								103,
								101
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint_y"
						}
					]
				}
			},
			{
				name: "pair",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								97,
								105,
								114
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint_x"
						},
						{
							kind: "account",
							path: "token_mint_y"
						},
						{
							kind: "account",
							path: "bin_step_config.bin_step",
							account: "BinStepConfig"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "active_id",
				type: "u32"
			}
		]
	},
	{
		name: "initialize_quote_asset_badge",
		discriminator: [
			115,
			174,
			34,
			42,
			176,
			5,
			229,
			207
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "quote_asset_badge",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								113,
								117,
								111,
								116,
								101,
								95,
								97,
								115,
								115,
								101,
								116,
								95,
								98,
								97,
								100,
								103,
								101
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint"
						}
					]
				}
			},
			{
				name: "token_mint"
			},
			{
				name: "preset_authority",
				writable: true,
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "set_hook",
		discriminator: [
			175,
			16,
			187,
			252,
			19,
			54,
			111,
			221
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"pair"
				]
			},
			{
				name: "pair",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			}
		],
		args: [
		]
	},
	{
		name: "swap",
		discriminator: [
			248,
			198,
			158,
			145,
			225,
			117,
			135,
			200
		],
		accounts: [
			{
				name: "pair",
				writable: true,
				relations: [
					"bin_array_lower",
					"bin_array_upper"
				]
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "bin_array_lower",
				writable: true
			},
			{
				name: "bin_array_upper",
				writable: true
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "user_vault_x",
				writable: true
			},
			{
				name: "user_vault_y",
				writable: true
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "hook",
				writable: true,
				optional: true
			},
			{
				name: "hooks_program",
				optional: true
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "amount",
				type: "u64"
			},
			{
				name: "other_amount_threshold",
				type: "u64"
			},
			{
				name: "swap_for_y",
				type: "bool"
			},
			{
				name: "swap_type",
				type: {
					defined: {
						name: "SwapType"
					}
				}
			}
		]
	},
	{
		name: "transfer_config_ownership",
		discriminator: [
			53,
			124,
			67,
			226,
			108,
			130,
			19,
			12
		],
		accounts: [
			{
				name: "liquidity_book_config",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "new_authority",
				type: {
					option: "pubkey"
				}
			}
		]
	},
	{
		name: "update_bin_step_config",
		discriminator: [
			205,
			204,
			206,
			220,
			251,
			239,
			19,
			238
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"bin_step_config"
				]
			},
			{
				name: "bin_step_config",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "status",
				type: {
					defined: {
						name: "ConfigStatus"
					}
				}
			},
			{
				name: "availability",
				type: {
					defined: {
						name: "ConfigAvailability"
					}
				}
			},
			{
				name: "fee_parameters",
				type: {
					defined: {
						name: "StaticFeeParameters"
					}
				}
			}
		]
	},
	{
		name: "update_pair_static_fee_parameters",
		discriminator: [
			20,
			223,
			186,
			73,
			199,
			65,
			45,
			80
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"pair"
				]
			},
			{
				name: "pair",
				writable: true
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "fee_parameters",
				type: {
					defined: {
						name: "StaticFeeParameters"
					}
				}
			}
		]
	},
	{
		name: "update_quote_asset_badge",
		discriminator: [
			42,
			12,
			208,
			17,
			29,
			174,
			196,
			103
		],
		accounts: [
			{
				name: "liquidity_book_config"
			},
			{
				name: "quote_asset_badge",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								113,
								117,
								111,
								116,
								101,
								95,
								97,
								115,
								115,
								101,
								116,
								95,
								98,
								97,
								100,
								103,
								101
							]
						},
						{
							kind: "account",
							path: "liquidity_book_config"
						},
						{
							kind: "account",
							path: "token_mint"
						}
					]
				}
			},
			{
				name: "token_mint"
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "status",
				type: {
					defined: {
						name: "QuoteAssetBadgeStatus"
					}
				}
			}
		]
	},
	{
		name: "withdraw_protocol_fees",
		discriminator: [
			11,
			68,
			165,
			98,
			18,
			208,
			134,
			73
		],
		accounts: [
			{
				name: "liquidity_book_config",
				relations: [
					"pair"
				]
			},
			{
				name: "pair",
				writable: true
			},
			{
				name: "token_mint_x",
				relations: [
					"pair"
				]
			},
			{
				name: "token_mint_y",
				relations: [
					"pair"
				]
			},
			{
				name: "token_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "pair"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "protocol_vault_x",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "preset_authority"
						},
						{
							kind: "account",
							path: "token_program_x"
						},
						{
							kind: "account",
							path: "pair.token_mint_x",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "protocol_vault_y",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "preset_authority"
						},
						{
							kind: "account",
							path: "token_program_y"
						},
						{
							kind: "account",
							path: "pair.token_mint_y",
							account: "Pair"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "token_program_x"
			},
			{
				name: "token_program_y"
			},
			{
				name: "preset_authority",
				signer: true,
				relations: [
					"liquidity_book_config"
				]
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	}
];
var accounts$2 = [
	{
		name: "BinArray",
		discriminator: [
			92,
			142,
			92,
			220,
			5,
			148,
			70,
			181
		]
	},
	{
		name: "BinStepConfig",
		discriminator: [
			44,
			12,
			82,
			45,
			127,
			124,
			191,
			199
		]
	},
	{
		name: "LiquidityBookConfig",
		discriminator: [
			173,
			36,
			130,
			129,
			45,
			178,
			44,
			86
		]
	},
	{
		name: "Pair",
		discriminator: [
			85,
			72,
			49,
			176,
			182,
			228,
			141,
			82
		]
	},
	{
		name: "Position",
		discriminator: [
			170,
			188,
			143,
			228,
			122,
			64,
			247,
			208
		]
	},
	{
		name: "QuoteAssetBadge",
		discriminator: [
			183,
			124,
			99,
			219,
			110,
			119,
			157,
			221
		]
	}
];
var events$2 = [
	{
		name: "BinArrayInitializationEvent",
		discriminator: [
			237,
			158,
			3,
			184,
			253,
			238,
			102,
			71
		]
	},
	{
		name: "BinStepConfigInitializationEvent",
		discriminator: [
			2,
			138,
			209,
			132,
			61,
			232,
			124,
			57
		]
	},
	{
		name: "BinStepConfigUpdateEvent",
		discriminator: [
			241,
			69,
			172,
			53,
			135,
			27,
			238,
			248
		]
	},
	{
		name: "BinSwapEvent",
		discriminator: [
			55,
			42,
			192,
			194,
			230,
			243,
			9,
			72
		]
	},
	{
		name: "CompositionFeesEvent",
		discriminator: [
			83,
			234,
			249,
			47,
			88,
			125,
			2,
			86
		]
	},
	{
		name: "LiquidityBookConfigInitializationEvent",
		discriminator: [
			90,
			99,
			66,
			116,
			24,
			72,
			145,
			146
		]
	},
	{
		name: "LiquidityBookConfigTransferOwnershipEvent",
		discriminator: [
			181,
			131,
			103,
			224,
			188,
			170,
			226,
			65
		]
	},
	{
		name: "LiquidityBookConfigTransferOwnershipInitEvent",
		discriminator: [
			69,
			165,
			109,
			99,
			223,
			38,
			229,
			100
		]
	},
	{
		name: "PairInitializationEvent",
		discriminator: [
			132,
			133,
			209,
			222,
			229,
			215,
			206,
			245
		]
	},
	{
		name: "PairStaticFeeParametersUpdateEvent",
		discriminator: [
			57,
			109,
			202,
			252,
			154,
			9,
			121,
			131
		]
	},
	{
		name: "PositionCreationEvent",
		discriminator: [
			97,
			21,
			205,
			201,
			62,
			41,
			111,
			164
		]
	},
	{
		name: "PositionDecreaseEvent",
		discriminator: [
			200,
			116,
			151,
			126,
			182,
			237,
			245,
			254
		]
	},
	{
		name: "PositionIncreaseEvent",
		discriminator: [
			247,
			40,
			58,
			113,
			28,
			175,
			60,
			174
		]
	},
	{
		name: "ProtocolFeesCollectionEvent",
		discriminator: [
			196,
			36,
			190,
			66,
			172,
			52,
			142,
			15
		]
	},
	{
		name: "QuoteAssetBadgeInitializationEvent",
		discriminator: [
			202,
			110,
			93,
			186,
			165,
			96,
			200,
			27
		]
	},
	{
		name: "QuoteAssetBadgeUpdateEvent",
		discriminator: [
			102,
			149,
			171,
			236,
			123,
			73,
			205,
			194
		]
	}
];
var errors$2 = [
	{
		code: 6000,
		name: "BinNotFound",
		msg: "Bin not found within bin array"
	},
	{
		code: 6001,
		name: "InvalidAuthority",
		msg: "Invalid authority"
	},
	{
		code: 6002,
		name: "InvalidAmounts",
		msg: "Invalid amounts length"
	},
	{
		code: 6003,
		name: "BinArrayIndexMismatch",
		msg: "Bin array index mismatch"
	},
	{
		code: 6004,
		name: "InvalidAmountOut",
		msg: "Invalid amount out"
	},
	{
		code: 6005,
		name: "InvalidAmountIn",
		msg: "Invalid amount in"
	},
	{
		code: 6006,
		name: "InvalidDistribution",
		msg: "Invalid distribution"
	},
	{
		code: 6007,
		name: "LiquidityOverflow",
		msg: "Liquidity overflow"
	},
	{
		code: 6008,
		name: "LiquidityUnderflow",
		msg: "Liquidity underflow"
	},
	{
		code: 6009,
		name: "ZeroShares",
		msg: "Zero shares"
	},
	{
		code: 6010,
		name: "NotPositionOwner",
		msg: "Not the owner of the position"
	},
	{
		code: 6011,
		name: "InvalidStaticFeeParameters",
		msg: "Invalid static fee parameters"
	},
	{
		code: 6012,
		name: "InvalidConfig",
		msg: "Invalid LB config provided"
	},
	{
		code: 6013,
		name: "PairPositionMismatch",
		msg: "Pair and position mismatch"
	},
	{
		code: 6014,
		name: "PairLowerBinArrayMismatch",
		msg: "Pair and lower bin array mismatch"
	},
	{
		code: 6015,
		name: "PairUpperBinArrayMismatch",
		msg: "Pair and upper bin array mismatch"
	},
	{
		code: 6016,
		name: "InactiveBinStepConfig",
		msg: "Inactive bin step config"
	},
	{
		code: 6017,
		name: "ClosedBinStepConfig",
		msg: "Closed bin step config"
	},
	{
		code: 6018,
		name: "InvalidQuoteAssetBadge",
		msg: "Invalid quote asset badge provided"
	},
	{
		code: 6019,
		name: "TransferFeeCalculationError",
		msg: "Transfer fee calculation error"
	},
	{
		code: 6020,
		name: "GetAmountOverflow",
		msg: "Get amount overflow error"
	},
	{
		code: 6021,
		name: "AmountOverflow",
		msg: "Amount overflow error"
	},
	{
		code: 6022,
		name: "AmountUnderflow",
		msg: "Amount underflow error"
	},
	{
		code: 6023,
		name: "ActiveIdOverflow",
		msg: "Active id overflow error"
	},
	{
		code: 6024,
		name: "ActiveIdUnderflow",
		msg: "Active id overflow error"
	},
	{
		code: 6025,
		name: "InvalidBinRange",
		msg: "Invalid bin range"
	},
	{
		code: 6026,
		name: "PairTokenMismatch",
		msg: "Pair Token Mismatch"
	},
	{
		code: 6027,
		name: "InvalidHook",
		msg: "Invalid Hook Provided"
	},
	{
		code: 6028,
		name: "UserVaultXMismatch",
		msg: "Token Account X Mismatch"
	},
	{
		code: 6029,
		name: "UserVaultYMismatch",
		msg: "Token Account Y Mismatch"
	}
];
var types$2 = [
	{
		name: "Bin",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "total_supply",
					type: "u128"
				},
				{
					name: "reserve_x",
					type: "u64"
				},
				{
					name: "reserve_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "BinArray",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "bins",
					type: {
						array: [
							{
								defined: {
									name: "Bin"
								}
							},
							256
						]
					}
				},
				{
					name: "index",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							12
						]
					}
				}
			]
		}
	},
	{
		name: "BinArrayInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "index",
					type: "u32"
				}
			]
		}
	},
	{
		name: "BinLiquidityDistribution",
		type: {
			kind: "struct",
			fields: [
				{
					name: "relative_bin_id",
					type: "i32"
				},
				{
					name: "distribution_x",
					type: "u16"
				},
				{
					name: "distribution_y",
					type: "u16"
				}
			]
		}
	},
	{
		name: "BinStepConfig",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: "u8"
				},
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "ConfigStatus"
						}
					}
				},
				{
					name: "availability",
					type: {
						defined: {
							name: "ConfigAvailability"
						}
					}
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "BinStepConfigInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "BinStepConfigUpdateEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bin_step_config",
					type: "pubkey"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "ConfigStatus"
						}
					}
				},
				{
					name: "availability",
					type: {
						defined: {
							name: "ConfigAvailability"
						}
					}
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "BinSwapEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "swap_for_y",
					type: "bool"
				},
				{
					name: "protocol_fee",
					type: "u64"
				},
				{
					name: "bin_id",
					type: "u32"
				},
				{
					name: "amount_in",
					type: "u64"
				},
				{
					name: "amount_out",
					type: "u64"
				},
				{
					name: "volatility_accumulator",
					type: "u32"
				},
				{
					name: "fee",
					type: "u64"
				}
			]
		}
	},
	{
		name: "CompositionFeesEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "active_id",
					type: "u32"
				},
				{
					name: "composition_fees_x",
					type: "u64"
				},
				{
					name: "composition_fees_y",
					type: "u64"
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "ConfigAvailability",
		type: {
			kind: "enum",
			variants: [
				{
					name: "Closed"
				},
				{
					name: "Open"
				}
			]
		}
	},
	{
		name: "ConfigStatus",
		type: {
			kind: "enum",
			variants: [
				{
					name: "Inactive"
				},
				{
					name: "Active"
				}
			]
		}
	},
	{
		name: "DynamicFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "time_last_updated",
					type: "u64"
				},
				{
					name: "volatility_accumulator",
					type: "u32"
				},
				{
					name: "volatility_reference",
					type: "u32"
				},
				{
					name: "id_reference",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							4
						]
					}
				}
			]
		}
	},
	{
		name: "LiquidityBookConfig",
		type: {
			kind: "struct",
			fields: [
				{
					name: "preset_authority",
					type: "pubkey"
				},
				{
					name: "pending_preset_authority",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "LiquidityBookConfigInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "config",
					type: "pubkey"
				},
				{
					name: "preset_authority",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "LiquidityBookConfigTransferOwnershipEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "new_authority",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "LiquidityBookConfigTransferOwnershipInitEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "new_pending_authority",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "Pair",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "bin_step_seed",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "token_mint_x",
					type: "pubkey"
				},
				{
					name: "token_mint_y",
					type: "pubkey"
				},
				{
					name: "static_fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				},
				{
					name: "active_id",
					type: "u32"
				},
				{
					name: "dynamic_fee_parameters",
					type: {
						defined: {
							name: "DynamicFeeParameters"
						}
					}
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				},
				{
					name: "hook",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "PairInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "token_mint_x",
					type: "pubkey"
				},
				{
					name: "token_mint_y",
					type: "pubkey"
				},
				{
					name: "bin_step_config",
					type: "pubkey"
				},
				{
					name: "active_id",
					type: "u32"
				}
			]
		}
	},
	{
		name: "PairStaticFeeParametersUpdateEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				}
			]
		}
	},
	{
		name: "Position",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position_mint",
					type: "pubkey"
				},
				{
					name: "liquidity_shares",
					type: {
						array: [
							"u128",
							64
						]
					}
				},
				{
					name: "lower_bin_id",
					type: "u32"
				},
				{
					name: "upper_bin_id",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							8
						]
					}
				}
			]
		}
	},
	{
		name: "PositionCreationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "position_mint",
					type: "pubkey"
				},
				{
					name: "lower_bin_id",
					type: "u32"
				},
				{
					name: "upper_bin_id",
					type: "u32"
				}
			]
		}
	},
	{
		name: "PositionDecreaseEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "bin_ids",
					type: {
						vec: "u32"
					}
				},
				{
					name: "amounts_x",
					type: {
						vec: "u64"
					}
				},
				{
					name: "amounts_y",
					type: {
						vec: "u64"
					}
				},
				{
					name: "liquidity_burned",
					type: {
						vec: "u128"
					}
				}
			]
		}
	},
	{
		name: "PositionIncreaseEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position",
					type: "pubkey"
				},
				{
					name: "bin_ids",
					type: {
						vec: "u32"
					}
				},
				{
					name: "amounts_x",
					type: {
						vec: "u64"
					}
				},
				{
					name: "amounts_y",
					type: {
						vec: "u64"
					}
				},
				{
					name: "liquidity_minted",
					type: {
						vec: "u128"
					}
				}
			]
		}
	},
	{
		name: "ProtocolFeesCollectionEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "QuoteAssetBadge",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: "u8"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "QuoteAssetBadgeStatus"
						}
					}
				}
			]
		}
	},
	{
		name: "QuoteAssetBadgeInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "quote_asset_badge",
					type: "pubkey"
				},
				{
					name: "token_mint",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "QuoteAssetBadgeStatus",
		type: {
			kind: "enum",
			variants: [
				{
					name: "Disabled"
				},
				{
					name: "Enabled"
				}
			]
		}
	},
	{
		name: "QuoteAssetBadgeUpdateEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "quote_asset_badge",
					type: "pubkey"
				},
				{
					name: "status",
					type: {
						defined: {
							name: "QuoteAssetBadgeStatus"
						}
					}
				}
			]
		}
	},
	{
		name: "StaticFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "base_factor",
					type: "u16"
				},
				{
					name: "filter_period",
					type: "u16"
				},
				{
					name: "decay_period",
					type: "u16"
				},
				{
					name: "reduction_factor",
					type: "u16"
				},
				{
					name: "variable_fee_control",
					type: "u32"
				},
				{
					name: "max_volatility_accumulator",
					type: "u32"
				},
				{
					name: "protocol_share",
					type: "u16"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							2
						]
					}
				}
			]
		}
	},
	{
		name: "SwapType",
		type: {
			kind: "enum",
			variants: [
				{
					name: "ExactInput"
				},
				{
					name: "ExactOutput"
				}
			]
		}
	}
];
var LiquidityBookIDLDevnet = {
	address: address$2,
	metadata: metadata$2,
	instructions: instructions$2,
	accounts: accounts$2,
	events: events$2,
	errors: errors$2,
	types: types$2
};

var address$3 = "BXpvgXGKDKax82p9JK2E8jRoKLify6eq3mMaW1wHVhuK";
var metadata$3 = {
	name: "rewarder_hook",
	version: "0.1.0",
	spec: "0.1.0",
	description: "Created with Anchor"
};
var instructions$3 = [
	{
		name: "before_burn",
		discriminator: [
			7,
			177,
			19,
			160,
			28,
			229,
			57,
			73
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper",
					"position_hook_bin_array_lower",
					"position_hook_bin_array_upper"
				]
			},
			{
				name: "position"
			},
			{
				name: "active_bin_array_lower"
			},
			{
				name: "active_bin_array_upper"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "position"
						}
					]
				}
			},
			{
				name: "position_hook_bin_array_lower",
				writable: true
			},
			{
				name: "position_hook_bin_array_upper",
				writable: true
			}
		],
		args: [
		]
	},
	{
		name: "before_mint",
		discriminator: [
			67,
			27,
			57,
			7,
			28,
			168,
			109,
			153
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper",
					"position_hook_bin_array_lower",
					"position_hook_bin_array_upper"
				]
			},
			{
				name: "position"
			},
			{
				name: "active_bin_array_lower"
			},
			{
				name: "active_bin_array_upper"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "position"
						}
					]
				}
			},
			{
				name: "position_hook_bin_array_lower",
				writable: true
			},
			{
				name: "position_hook_bin_array_upper",
				writable: true
			}
		],
		args: [
		]
	},
	{
		name: "before_swap",
		discriminator: [
			227,
			59,
			240,
			68,
			164,
			9,
			29,
			254
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower"
			},
			{
				name: "active_bin_array_upper"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			}
		],
		args: [
		]
	},
	{
		name: "claim",
		discriminator: [
			62,
			198,
			214,
			193,
			213,
			159,
			108,
			210
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper",
					"position_hook_bin_array_lower",
					"position_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"position",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "position"
			},
			{
				name: "position_mint",
				relations: [
					"position"
				]
			},
			{
				name: "position_token_account",
				pda: {
					seeds: [
						{
							kind: "account",
							path: "user"
						},
						{
							kind: "account",
							path: "position_token_program"
						},
						{
							kind: "account",
							path: "position_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "position"
						}
					]
				}
			},
			{
				name: "position_hook_bin_array_lower",
				writable: true
			},
			{
				name: "position_hook_bin_array_upper",
				writable: true
			},
			{
				name: "reward_token_mint"
			},
			{
				name: "hook_reserve",
				writable: true,
				relations: [
					"hook"
				]
			},
			{
				name: "user_reserve",
				writable: true
			},
			{
				name: "user",
				signer: true
			},
			{
				name: "reward_token_program"
			},
			{
				name: "position_token_program"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "initialize_bin_array",
		discriminator: [
			35,
			86,
			19,
			185,
			78,
			212,
			75,
			211
		],
		accounts: [
			{
				name: "hook"
			},
			{
				name: "bin_array",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								98,
								105,
								110,
								95,
								97,
								114,
								114,
								97,
								121
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "arg",
							path: "index"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "index",
				type: "u32"
			}
		]
	},
	{
		name: "initialize_hook",
		discriminator: [
			37,
			101,
			119,
			255,
			156,
			39,
			252,
			232
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								104,
								111,
								111,
								107
							]
						},
						{
							kind: "account",
							path: "hook_authority"
						},
						{
							kind: "arg",
							path: "pair"
						}
					]
				}
			},
			{
				name: "reward_token_mint"
			},
			{
				name: "hook_reserve",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "reward_token_mint_token_program"
						},
						{
							kind: "account",
							path: "reward_token_mint"
						}
					],
					program: {
						kind: "const",
						value: [
							140,
							151,
							37,
							143,
							78,
							36,
							137,
							241,
							187,
							61,
							16,
							41,
							20,
							142,
							13,
							131,
							11,
							90,
							19,
							153,
							218,
							255,
							16,
							132,
							4,
							142,
							123,
							216,
							219,
							233,
							248,
							89
						]
					}
				}
			},
			{
				name: "hook_authority",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "associated_token_program",
				address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
			},
			{
				name: "reward_token_mint_token_program"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "lb_pair",
				type: "pubkey"
			}
		]
	},
	{
		name: "initialize_position",
		discriminator: [
			219,
			192,
			234,
			71,
			190,
			191,
			102,
			80
		],
		accounts: [
			{
				name: "hook"
			},
			{
				name: "lb_position"
			},
			{
				name: "position",
				writable: true,
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								112,
								111,
								115,
								105,
								116,
								105,
								111,
								110
							]
						},
						{
							kind: "account",
							path: "hook"
						},
						{
							kind: "account",
							path: "lb_position"
						}
					]
				}
			},
			{
				name: "user",
				writable: true,
				signer: true
			},
			{
				name: "system_program",
				address: "11111111111111111111111111111111"
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
		]
	},
	{
		name: "on_hook_set",
		discriminator: [
			23,
			126,
			214,
			186,
			197,
			123,
			0,
			235
		],
		accounts: [
			{
				name: "pair_account"
			},
			{
				name: "hook"
			},
			{
				name: "pair",
				signer: true,
				relations: [
					"hook"
				]
			}
		],
		args: [
		]
	},
	{
		name: "set_reward_range",
		discriminator: [
			124,
			43,
			236,
			120,
			6,
			88,
			112,
			213
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_reserve",
				relations: [
					"hook"
				]
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "delta_bin_a",
				type: "i32"
			},
			{
				name: "delta_bin_b",
				type: "i32"
			}
		]
	},
	{
		name: "set_rewards_parameters",
		discriminator: [
			86,
			145,
			230,
			205,
			136,
			137,
			140,
			193
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_reserve",
				relations: [
					"hook"
				]
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "rewards_per_second",
				type: "u64"
			},
			{
				name: "start_time",
				type: "i64"
			},
			{
				name: "duration",
				type: "i64"
			}
		]
	},
	{
		name: "set_rewards_per_second",
		discriminator: [
			77,
			81,
			53,
			27,
			248,
			29,
			133,
			203
		],
		accounts: [
			{
				name: "hook",
				writable: true,
				relations: [
					"active_bin_hook_bin_array_lower",
					"active_bin_hook_bin_array_upper"
				]
			},
			{
				name: "pair",
				relations: [
					"hook",
					"active_bin_array_lower",
					"active_bin_array_upper"
				]
			},
			{
				name: "active_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_array_upper",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_lower",
				writable: true
			},
			{
				name: "active_bin_hook_bin_array_upper",
				writable: true
			},
			{
				name: "hook_reserve",
				relations: [
					"hook"
				]
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "event_authority",
				pda: {
					seeds: [
						{
							kind: "const",
							value: [
								95,
								95,
								101,
								118,
								101,
								110,
								116,
								95,
								97,
								117,
								116,
								104,
								111,
								114,
								105,
								116,
								121
							]
						}
					]
				}
			},
			{
				name: "program"
			}
		],
		args: [
			{
				name: "rewards_per_second",
				type: "u64"
			},
			{
				name: "duration",
				type: "i64"
			}
		]
	},
	{
		name: "sweep",
		discriminator: [
			40,
			23,
			234,
			175,
			14,
			61,
			154,
			177
		],
		accounts: [
			{
				name: "hook",
				writable: true
			},
			{
				name: "reward_token_mint"
			},
			{
				name: "hook_reserve",
				writable: true,
				relations: [
					"hook"
				]
			},
			{
				name: "authority_reserve",
				writable: true
			},
			{
				name: "authority",
				signer: true,
				relations: [
					"hook"
				]
			},
			{
				name: "reward_token_program"
			},
			{
				name: "memo_program",
				address: "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
			}
		],
		args: [
		]
	}
];
var accounts$3 = [
	{
		name: "BinArray",
		discriminator: [
			92,
			142,
			92,
			220,
			5,
			148,
			70,
			181
		]
	},
	{
		name: "Hook",
		discriminator: [
			125,
			61,
			76,
			173,
			200,
			161,
			92,
			217
		]
	},
	{
		name: "HookBinArray",
		discriminator: [
			103,
			134,
			57,
			58,
			74,
			234,
			9,
			157
		]
	},
	{
		name: "HookPosition",
		discriminator: [
			125,
			149,
			132,
			62,
			52,
			71,
			211,
			143
		]
	},
	{
		name: "Pair",
		discriminator: [
			85,
			72,
			49,
			176,
			182,
			228,
			141,
			82
		]
	},
	{
		name: "Position",
		discriminator: [
			170,
			188,
			143,
			228,
			122,
			64,
			247,
			208
		]
	}
];
var events$3 = [
	{
		name: "ClaimEvent",
		discriminator: [
			93,
			15,
			70,
			170,
			48,
			140,
			212,
			219
		]
	},
	{
		name: "DeltaBinSetEvent",
		discriminator: [
			0,
			208,
			34,
			219,
			151,
			91,
			139,
			244
		]
	},
	{
		name: "HookInitializationEvent",
		discriminator: [
			229,
			217,
			175,
			38,
			112,
			240,
			117,
			95
		]
	},
	{
		name: "RewardParametersSetEvent",
		discriminator: [
			191,
			11,
			46,
			163,
			150,
			8,
			126,
			245
		]
	}
];
var errors$3 = [
	{
		code: 6000,
		name: "CheckedAddSignedOverflow",
		msg: "Checked add signed overflow"
	},
	{
		code: 6001,
		name: "CheckedAddOverflow",
		msg: "Checked add overflow"
	},
	{
		code: 6002,
		name: "HookBinArrayIndexMismatch",
		msg: "Hook bin array index mismatch"
	},
	{
		code: 6003,
		name: "BinNotFound",
		msg: "Bin not found"
	},
	{
		code: 6004,
		name: "ShlDivError",
		msg: "Shift left division error"
	},
	{
		code: 6005,
		name: "MulDivError",
		msg: "Mul div error"
	},
	{
		code: 6006,
		name: "MulShrError",
		msg: "Mul shr error"
	},
	{
		code: 6007,
		name: "CheckedMulOverflow",
		msg: "Checked Mul overflow"
	},
	{
		code: 6008,
		name: "InvalidStartTime",
		msg: "Invalid start time"
	},
	{
		code: 6009,
		name: "CheckedSubUnderflow",
		msg: "Checked sub underflow"
	},
	{
		code: 6010,
		name: "ZeroRewards",
		msg: "Rewarder won't distribute any rewards"
	},
	{
		code: 6011,
		name: "InvalidDeltaBins",
		msg: "Invalid delta bins"
	},
	{
		code: 6012,
		name: "InvalidLBPosition",
		msg: "Invalid LB position"
	}
];
var types$3 = [
	{
		name: "Bin",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "total_supply",
					type: "u128"
				},
				{
					name: "reserve_x",
					type: "u64"
				},
				{
					name: "reserve_y",
					type: "u64"
				}
			]
		}
	},
	{
		name: "BinArray",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "bins",
					type: {
						array: [
							{
								defined: {
									name: "Bin"
								}
							},
							256
						]
					}
				},
				{
					name: "index",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							12
						]
					}
				}
			]
		}
	},
	{
		name: "ClaimEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "user",
					type: "pubkey"
				},
				{
					name: "rewards",
					type: "u64"
				}
			]
		}
	},
	{
		name: "DeltaBinSetEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "delta_bin_a",
					type: "i32"
				},
				{
					name: "delta_bin_b",
					type: "i32"
				}
			]
		}
	},
	{
		name: "DynamicFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "time_last_updated",
					type: "u64"
				},
				{
					name: "volatility_accumulator",
					type: "u32"
				},
				{
					name: "volatility_reference",
					type: "u32"
				},
				{
					name: "id_reference",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							4
						]
					}
				}
			]
		}
	},
	{
		name: "Hook",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "authority",
					type: "pubkey"
				},
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "reward_token_mint",
					type: "pubkey"
				},
				{
					name: "hook_reserve",
					type: "pubkey"
				},
				{
					name: "rewards_per_second",
					type: "u64"
				},
				{
					name: "end_time",
					type: "i64"
				},
				{
					name: "last_update",
					type: "i64"
				},
				{
					name: "delta_bin_a",
					type: "i32"
				},
				{
					name: "delta_bin_b",
					type: "i32"
				},
				{
					name: "total_unclaimed_rewards",
					type: "u64"
				}
			]
		}
	},
	{
		name: "HookBinArray",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "index",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							28
						]
					}
				},
				{
					name: "accrued_rewards_per_share",
					type: {
						array: [
							"u128",
							256
						]
					}
				}
			]
		}
	},
	{
		name: "HookInitializationEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "authority",
					type: "pubkey"
				},
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "hook",
					type: "pubkey"
				}
			]
		}
	},
	{
		name: "HookPosition",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "user_accrued_rewards_per_share",
					type: {
						array: [
							"u128",
							64
						]
					}
				},
				{
					name: "pending_rewards",
					type: "u64"
				},
				{
					name: "bump",
					type: "u8"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							7
						]
					}
				}
			]
		}
	},
	{
		name: "Pair",
		type: {
			kind: "struct",
			fields: [
				{
					name: "bump",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "liquidity_book_config",
					type: "pubkey"
				},
				{
					name: "bin_step",
					type: "u8"
				},
				{
					name: "bin_step_seed",
					type: {
						array: [
							"u8",
							1
						]
					}
				},
				{
					name: "token_mint_x",
					type: "pubkey"
				},
				{
					name: "token_mint_y",
					type: "pubkey"
				},
				{
					name: "static_fee_parameters",
					type: {
						defined: {
							name: "StaticFeeParameters"
						}
					}
				},
				{
					name: "active_id",
					type: "u32"
				},
				{
					name: "dynamic_fee_parameters",
					type: {
						defined: {
							name: "DynamicFeeParameters"
						}
					}
				},
				{
					name: "protocol_fees_x",
					type: "u64"
				},
				{
					name: "protocol_fees_y",
					type: "u64"
				},
				{
					name: "hook",
					type: {
						option: "pubkey"
					}
				}
			]
		}
	},
	{
		name: "Position",
		serialization: "bytemuck",
		repr: {
			kind: "c"
		},
		type: {
			kind: "struct",
			fields: [
				{
					name: "pair",
					type: "pubkey"
				},
				{
					name: "position_mint",
					type: "pubkey"
				},
				{
					name: "liquidity_shares",
					type: {
						array: [
							"u128",
							64
						]
					}
				},
				{
					name: "lower_bin_id",
					type: "u32"
				},
				{
					name: "upper_bin_id",
					type: "u32"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							8
						]
					}
				}
			]
		}
	},
	{
		name: "RewardParametersSetEvent",
		type: {
			kind: "struct",
			fields: [
				{
					name: "hook",
					type: "pubkey"
				},
				{
					name: "rewards_per_second",
					type: "u64"
				},
				{
					name: "start_time",
					type: "i64"
				},
				{
					name: "duration",
					type: "i64"
				}
			]
		}
	},
	{
		name: "StaticFeeParameters",
		type: {
			kind: "struct",
			fields: [
				{
					name: "base_factor",
					type: "u16"
				},
				{
					name: "filter_period",
					type: "u16"
				},
				{
					name: "decay_period",
					type: "u16"
				},
				{
					name: "reduction_factor",
					type: "u16"
				},
				{
					name: "variable_fee_control",
					type: "u32"
				},
				{
					name: "max_volatility_accumulator",
					type: "u32"
				},
				{
					name: "protocol_share",
					type: "u16"
				},
				{
					name: "_space",
					type: {
						array: [
							"u8",
							2
						]
					}
				}
			]
		}
	}
];
var MdmaIDLDevnet = {
	address: address$3,
	metadata: metadata$3,
	instructions: instructions$3,
	accounts: accounts$3,
	events: events$3,
	errors: errors$3,
	types: types$3
};

var LiquidityBookAbstract = function LiquidityBookAbstract(config) {
  var _config$options, _config$options2;
  // Initialize the services heref
  this.connection = new Connection(((_config$options = config.options) == null ? void 0 : _config$options.rpcUrl) || CONFIG[config.mode].rpc, ((_config$options2 = config.options) == null ? void 0 : _config$options2.commitmentOrConfig) || "confirmed");
  var provider = new AnchorProvider(this.connection, {}, AnchorProvider.defaultOptions());
  this.mode = config.mode;
  if (config.mode === MODE.DEVNET) {
    this.lbProgram = new Program(LiquidityBookIDLDevnet, provider);
    this.hooksProgram = new Program(MdmaIDLDevnet, provider);
  } else {
    this.lbProgram = new Program(LiquidityBookIDL, provider);
    this.hooksProgram = new Program(MdmaIDL, provider);
  }
};

var getProgram = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(address, connection) {
    var _account$value;
    var account, owner, program;
    return _regenerator().w(function (_context) {
      while (1) switch (_context.n) {
        case 0:
          _context.n = 1;
          return connection.getParsedAccountInfo(address);
        case 1:
          account = _context.v;
          owner = (_account$value = account.value) == null ? void 0 : _account$value.owner.toBase58();
          program = owner === TOKEN_PROGRAM_ID.toBase58() ? TOKEN_PROGRAM_ID : TOKEN_2022_PROGRAM_ID;
          return _context.a(2, program);
      }
    }, _callee);
  }));
  return function getProgram(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var getBase = function getBase(binStep) {
  var quotient = binStep << SCALE_OFFSET;
  if (quotient < 0) return null;
  var basisPointMaxBigInt = BASIS_POINT_MAX;
  var fraction = quotient / basisPointMaxBigInt;
  var oneBigInt = ONE;
  var result = oneBigInt + fraction;
  return result;
};
var getPriceFromId = function getPriceFromId(bin_step, bin_id, baseTokenDecimal, quoteTokenDecimal) {
  var base = getBase(bin_step);
  var exponent = bin_id - 8388608;
  var decimalPow = Math.pow(10, baseTokenDecimal - quoteTokenDecimal);
  return Math.pow(base, exponent) * decimalPow;
};
var getIdFromPrice = function getIdFromPrice(price, binStep, baseTokenDecimal, quoteTokenDecimal) {
  if (price <= 0) throw new Error('Giá phải lớn hơn 0');
  if (binStep <= 0 || binStep > BASIS_POINT_MAX) throw new Error('Bin step invalid');
  var decimalPow = Math.pow(10, quoteTokenDecimal - baseTokenDecimal);
  var base = 1 + binStep / BASIS_POINT_MAX;
  var exponent = Math.log(price * decimalPow) / Math.log(base);
  var binId = Math.round(exponent + 8388608);
  return binId;
};

var LBError = /*#__PURE__*/function (_Error) {
  function LBError(message) {
    var _this;
    _this = _Error.call(this, message) || this;
    _this.name = "LBError";
    return _this;
  }
  _inheritsLoose(LBError, _Error);
  return LBError;
}(/*#__PURE__*/_wrapNativeSuper(Error));
LBError.BinNotFound = /*#__PURE__*/new LBError("Bin not found");
LBError.BinArrayIndexMismatch = /*#__PURE__*/new LBError("Bin array index mismatch");
var BinArrayRange = /*#__PURE__*/function () {
  function BinArrayRange(binArrayPrevious, binArrayCurrent, binArrayNext) {
    var _this2 = this;
    if (binArrayCurrent.index !== binArrayPrevious.index + 1 || binArrayNext.index !== binArrayCurrent.index + 1) {
      throw LBError.BinArrayIndexMismatch;
    }
    this.bins = {};
    var addBins = function addBins(binArray) {
      binArray.bins.forEach(function (bin, index) {
        var binId = binArray.index * BIN_ARRAY_SIZE + index;
        _this2.bins[binId] = bin;
      });
    };
    addBins(binArrayPrevious);
    addBins(binArrayCurrent);
    addBins(binArrayNext);
  }
  var _proto = BinArrayRange.prototype;
  _proto.getBinMut = function getBinMut(binId) {
    var bin = this.bins[binId];
    return bin;
  };
  _proto.getAllBins = function getAllBins() {
    return Object.values(this.bins);
  };
  return BinArrayRange;
}();
var LBSwapService = /*#__PURE__*/function () {
  function LBSwapService(lbProgram, connection) {
    this.lbProgram = lbProgram;
    this.connection = connection;
    this.volatilityAccumulator = 0;
    this.volatilityReference = 0;
    this.referenceId = 0;
    this.timeLastUpdated = 0;
  }
  LBSwapService.fromLbConfig = function fromLbConfig(lbProgram, connection) {
    return new LBSwapService(lbProgram, connection);
  };
  var _proto2 = LBSwapService.prototype;
  _proto2.getBinArray = function getBinArray(params) {
    var binArrayIndex = params.binArrayIndex,
      pair = params.pair;
    var binArray = PublicKey.findProgramAddressSync([Buffer.from(utils.bytes.utf8.encode("bin_array")), pair.toBuffer(), new BN(binArrayIndex).toArrayLike(Buffer, "le", 4)], this.lbProgram.programId)[0];
    return binArray;
  };
  _proto2.calculateInOutAmount = /*#__PURE__*/function () {
    var _calculateInOutAmount = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(params) {
      var _this3 = this;
      var amount, swapForY, pair, isExactInput, pairInfo, currentBinArrayIndex, binArrayIndexes, binArrayAddresses, binArrays, binRange, totalSupply, amountAfterTransferFee, amountOut, amountIn, _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            amount = params.amount, swapForY = params.swapForY, pair = params.pair, isExactInput = params.isExactInput;
            _context.p = 1;
            _context.n = 2;
            return this.lbProgram.account.pair.fetch(pair);
          case 2:
            pairInfo = _context.v;
            if (pairInfo) {
              _context.n = 3;
              break;
            }
            throw new Error("Pair not found");
          case 3:
            currentBinArrayIndex = Math.floor(pairInfo.activeId / BIN_ARRAY_SIZE);
            binArrayIndexes = [currentBinArrayIndex - 1, currentBinArrayIndex, currentBinArrayIndex + 1];
            binArrayAddresses = binArrayIndexes.map(function (idx) {
              return _this3.getBinArray({
                binArrayIndex: idx,
                pair: pair
              });
            }); // Fetch bin arrays in batch, fallback to empty if not found
            _context.n = 4;
            return Promise.all(binArrayAddresses.map(function (address, i) {
              return (
                //@ts-ignore
                _this3.lbProgram.account.binArray.fetch(address)["catch"](function (error) {
                  return {
                    index: binArrayIndexes[i],
                    bins: []
                  };
                })
              );
            }));
          case 4:
            binArrays = _context.v;
            // Validate bin arrays and build range
            binRange = new BinArrayRange(binArrays[0], binArrays[1], binArrays[2]);
            totalSupply = binRange.getAllBins().reduce(function (acc, cur) {
              return acc.add(cur.totalSupply);
            }, new BN(0));
            if (!totalSupply.isZero()) {
              _context.n = 5;
              break;
            }
            return _context.a(2, {
              amountIn: BigInt(0),
              amountOut: BigInt(0)
            });
          case 5:
            amountAfterTransferFee = amount;
            if (!isExactInput) {
              _context.n = 7;
              break;
            }
            _context.n = 6;
            return this.calculateAmountOut(amountAfterTransferFee, binRange, pairInfo, swapForY);
          case 6:
            amountOut = _context.v;
            return _context.a(2, {
              amountIn: amount,
              amountOut: amountOut
            });
          case 7:
            _context.n = 8;
            return this.calculateAmountIn(amountAfterTransferFee, binRange, pairInfo, swapForY);
          case 8:
            amountIn = _context.v;
            return _context.a(2, {
              amountIn: amountIn,
              amountOut: amountAfterTransferFee
            });
          case 9:
            _context.n = 11;
            break;
          case 10:
            _context.p = 10;
            _t = _context.v;
            throw new Error(_t);
          case 11:
            return _context.a(2);
        }
      }, _callee, this, [[1, 10]]);
    }));
    function calculateInOutAmount(_x) {
      return _calculateInOutAmount.apply(this, arguments);
    }
    return calculateInOutAmount;
  }()
  /**
   * @description Calculate the input amount for the swap. isExactInput = false
   */
  ;
  _proto2.calculateAmountIn =
  /*#__PURE__*/
  function () {
    var _calculateAmountIn = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(amount, bins, pairInfo, swapForY) {
      var amountIn, totalProtocolFee, amountOutLeft, activeId, totalBinUsed, activeBin, fee, _this$swapExactOutput, amountInWithFees, amountOutOfBin, protocolFeeAmount, _t2;
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.p = 0;
            amountIn = BigInt(0);
            totalProtocolFee = BigInt(0);
            amountOutLeft = amount;
            activeId = pairInfo.activeId;
            totalBinUsed = 0;
            _context2.n = 1;
            return this.updateReferences(pairInfo, activeId);
          case 1:
            if (!(amountOutLeft > BigInt(0))) {
              _context2.n = 4;
              break;
            }
            totalBinUsed++;
            this.updateVolatilityAccumulator(pairInfo, activeId);
            activeBin = bins.getBinMut(activeId);
            if (activeBin) {
              _context2.n = 2;
              break;
            }
            return _context2.a(3, 4);
          case 2:
            fee = this.getTotalFee(pairInfo);
            _this$swapExactOutput = this.swapExactOutput({
              binStep: pairInfo.binStep,
              activeId: activeId,
              amountOutLeft: amountOutLeft,
              fee: fee,
              protocolShare: pairInfo.staticFeeParameters.protocolShare,
              swapForY: swapForY,
              reserveX: activeBin.reserveX,
              reserveY: activeBin.reserveY
            }), amountInWithFees = _this$swapExactOutput.amountInWithFees, amountOutOfBin = _this$swapExactOutput.amountOut, protocolFeeAmount = _this$swapExactOutput.protocolFeeAmount;
            amountIn += amountInWithFees;
            amountOutLeft -= amountOutOfBin;
            totalProtocolFee += protocolFeeAmount;
            if (amountOutLeft) {
              _context2.n = 3;
              break;
            }
            return _context2.a(3, 4);
          case 3:
            activeId = this.moveActiveId(activeId, swapForY);
            _context2.n = 1;
            break;
          case 4:
            if (!(totalBinUsed >= 30)) {
              _context2.n = 5;
              break;
            }
            throw "Swap crosses too many bins – quote aborted.";
          case 5:
            return _context2.a(2, amountIn);
          case 6:
            _context2.p = 6;
            _t2 = _context2.v;
            throw _t2;
          case 7:
            return _context2.a(2);
        }
      }, _callee2, this, [[0, 6]]);
    }));
    function calculateAmountIn(_x2, _x3, _x4, _x5) {
      return _calculateAmountIn.apply(this, arguments);
    }
    return calculateAmountIn;
  }()
  /**
   * @description Calculate the output amount for the swap. isExactInput = true
   */
  ;
  _proto2.calculateAmountOut =
  /*#__PURE__*/
  function () {
    var _calculateAmountOut = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(amount, bins, pairInfo, swapForY) {
      var amountOut, totalProtocolFee, amountInLeft, activeId, totalBinUsed, activeBin, fee, _this$swapExactInput, amountInWithFees, amountOutOfBin, protocolFeeAmount, _t3;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            _context3.p = 0;
            amountOut = BigInt(0);
            totalProtocolFee = BigInt(0);
            amountInLeft = amount;
            activeId = pairInfo.activeId;
            totalBinUsed = 0;
            _context3.n = 1;
            return this.updateReferences(pairInfo, activeId);
          case 1:
            if (!(amountInLeft > BigInt(0))) {
              _context3.n = 4;
              break;
            }
            totalBinUsed++;
            this.updateVolatilityAccumulator(pairInfo, activeId);
            activeBin = bins.getBinMut(activeId);
            if (activeBin) {
              _context3.n = 2;
              break;
            }
            return _context3.a(3, 4);
          case 2:
            fee = this.getTotalFee(pairInfo);
            _this$swapExactInput = this.swapExactInput({
              binStep: pairInfo.binStep,
              activeId: activeId,
              amountInLeft: amountInLeft,
              fee: fee,
              protocolShare: pairInfo.staticFeeParameters.protocolShare,
              swapForY: swapForY,
              reserveX: activeBin.reserveX,
              reserveY: activeBin.reserveY
            }), amountInWithFees = _this$swapExactInput.amountInWithFees, amountOutOfBin = _this$swapExactInput.amountOut, protocolFeeAmount = _this$swapExactInput.protocolFeeAmount;
            amountOut += amountOutOfBin;
            amountInLeft -= amountInWithFees;
            totalProtocolFee += protocolFeeAmount;
            if (amountInLeft) {
              _context3.n = 3;
              break;
            }
            return _context3.a(3, 4);
          case 3:
            activeId = this.moveActiveId(activeId, swapForY);
            _context3.n = 1;
            break;
          case 4:
            if (!(totalBinUsed >= 30)) {
              _context3.n = 5;
              break;
            }
            throw "Swap crosses too many bins – quote aborted.";
          case 5:
            return _context3.a(2, amountOut);
          case 6:
            _context3.p = 6;
            _t3 = _context3.v;
            throw _t3;
          case 7:
            return _context3.a(2);
        }
      }, _callee3, this, [[0, 6]]);
    }));
    function calculateAmountOut(_x6, _x7, _x8, _x9) {
      return _calculateAmountOut.apply(this, arguments);
    }
    return calculateAmountOut;
  }();
  _proto2.swapExactOutput = function swapExactOutput(params) {
    var binStep = params.binStep,
      activeId = params.activeId,
      amountOutLeft = params.amountOutLeft,
      protocolShare = params.protocolShare,
      swapForY = params.swapForY,
      reserveX = params.reserveX,
      reserveY = params.reserveY,
      fee = params.fee;
    var protocolShareBigInt = BigInt(protocolShare);
    var binReserveOut = swapForY ? reserveY : reserveX;
    if (binReserveOut.isZero()) {
      return {
        amountInWithFees: BigInt(0),
        amountOut: BigInt(0),
        feeAmount: BigInt(0),
        protocolFeeAmount: BigInt(0)
      };
    }
    var binReserveOutBigInt = BigInt(binReserveOut.toString());
    var amountOut = amountOutLeft > binReserveOutBigInt ? binReserveOutBigInt : amountOutLeft;
    /** @notice assume base token and quote token have the same decimals to get the price */
    var price = getPriceFromId(binStep, activeId, 9, 9);
    // Encode price as bigint with SCALE_OFFSET
    var priceScaled = BigInt(Math.round(Number(price) * Math.pow(2, SCALE_OFFSET)));
    var amountInWithoutFee = this.calcAmountInByPrice(amountOut, priceScaled, SCALE_OFFSET, swapForY, "up");
    var feeAmount = this.getFeeForAmount(amountInWithoutFee, fee);
    var amountIn = amountInWithoutFee + feeAmount;
    var protocolFeeAmount = this.getProtocolFee(feeAmount, protocolShareBigInt);
    return {
      amountInWithFees: amountIn,
      amountOut: amountOut,
      feeAmount: feeAmount,
      protocolFeeAmount: protocolFeeAmount
    };
  };
  _proto2.swapExactInput = function swapExactInput(params) {
    var binStep = params.binStep,
      activeId = params.activeId,
      amountInLeft = params.amountInLeft,
      protocolShare = params.protocolShare,
      swapForY = params.swapForY,
      reserveX = params.reserveX,
      reserveY = params.reserveY,
      fee = params.fee;
    var protocolShareBigInt = BigInt(protocolShare);
    var binReserveOut = swapForY ? reserveY : reserveX;
    if (binReserveOut.isZero()) {
      return {
        amountInWithFees: BigInt(0),
        amountOut: BigInt(0),
        feeAmount: BigInt(0),
        protocolFeeAmount: BigInt(0)
      };
    }
    var binReserveOutBigInt = BigInt(binReserveOut.toString());
    /** @notice assume base token and quote token have the same decimals to get the price */
    var price = getPriceFromId(binStep, activeId, 9, 9);
    // Encode price as bigint with SCALE_OFFSET
    var priceScaled = BigInt(Math.round(Number(price) * Math.pow(2, SCALE_OFFSET)));
    // Calculate maxAmountIn (input needed to take all output in bin, before fee)
    var maxAmountIn = this.calcAmountInByPrice(binReserveOutBigInt, priceScaled, SCALE_OFFSET, swapForY, "up");
    // Add fee to get total input needed (ceil)
    var maxFeeAmount = this.getFeeForAmount(maxAmountIn, fee);
    maxAmountIn += maxFeeAmount;
    var amountOut = BigInt(0);
    var amountIn = BigInt(0);
    var feeAmount = BigInt(0);
    if (amountInLeft >= maxAmountIn) {
      feeAmount = maxFeeAmount;
      amountIn = maxAmountIn - feeAmount;
      amountOut = binReserveOutBigInt;
    } else {
      feeAmount = this.getFeeAmount(amountInLeft, fee);
      amountIn = amountInLeft - feeAmount;
      amountOut = this.calcAmountOutByPrice(amountIn, priceScaled, SCALE_OFFSET, swapForY, "down");
      if (amountOut > binReserveOutBigInt) {
        amountOut = binReserveOutBigInt;
      }
    }
    var protocolFeeAmount = protocolShare > BigInt(0) ? this.getProtocolFee(feeAmount, protocolShareBigInt) : BigInt(0);
    return {
      amountInWithFees: amountIn + feeAmount,
      amountOut: amountOut,
      feeAmount: feeAmount,
      protocolFeeAmount: protocolFeeAmount
    };
  };
  _proto2.updateReferences = /*#__PURE__*/function () {
    var _updateReferences = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(pairInfo, activeId) {
      var slot, blockTimeStamp, timeDelta;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            this.referenceId = pairInfo.dynamicFeeParameters.idReference;
            this.timeLastUpdated = pairInfo.dynamicFeeParameters.timeLastUpdated.toNumber();
            this.volatilityReference = pairInfo.dynamicFeeParameters.volatilityReference;
            _context4.n = 1;
            return this.connection.getSlot();
          case 1:
            slot = _context4.v;
            _context4.n = 2;
            return this.connection.getBlockTime(slot);
          case 2:
            blockTimeStamp = _context4.v;
            if (!blockTimeStamp) {
              _context4.n = 5;
              break;
            }
            timeDelta = blockTimeStamp - this.timeLastUpdated;
            if (!(timeDelta > pairInfo.staticFeeParameters.filterPeriod)) {
              _context4.n = 4;
              break;
            }
            this.referenceId = activeId;
            if (!(timeDelta >= pairInfo.staticFeeParameters.decayPeriod)) {
              _context4.n = 3;
              break;
            }
            this.volatilityReference = 0;
            _context4.n = 4;
            break;
          case 3:
            return _context4.a(2, this.updateVolatilityReference(pairInfo));
          case 4:
            this.timeLastUpdated = blockTimeStamp;
          case 5:
            return _context4.a(2, this.updateVolatilityAccumulator(pairInfo, activeId));
        }
      }, _callee4, this);
    }));
    function updateReferences(_x0, _x1) {
      return _updateReferences.apply(this, arguments);
    }
    return updateReferences;
  }();
  _proto2.updateVolatilityReference = function updateVolatilityReference(pairInfo) {
    this.volatilityReference = pairInfo.dynamicFeeParameters.volatilityAccumulator * pairInfo.staticFeeParameters.reductionFactor / 10000;
  };
  _proto2.updateVolatilityAccumulator = function updateVolatilityAccumulator(pairInfo, activeId) {
    var deltaId = Math.abs(activeId - this.referenceId);
    var volatilityAccumulator = deltaId * 10000 + this.volatilityReference;
    var maxVolatilityAccumulator = pairInfo.staticFeeParameters.maxVolatilityAccumulator;
    if (volatilityAccumulator > maxVolatilityAccumulator) {
      this.volatilityAccumulator = maxVolatilityAccumulator;
    } else {
      this.volatilityAccumulator = volatilityAccumulator;
    }
  };
  _proto2.getVariableFee = function getVariableFee(pairInfo) {
    var variableFeeControl = BigInt(pairInfo.staticFeeParameters.variableFeeControl);
    if (variableFeeControl > BigInt(0)) {
      var prod = BigInt(Math.floor(this.volatilityAccumulator * pairInfo.binStep));
      var variableFee = (prod * prod * variableFeeControl + BigInt(VARIABLE_FEE_PRECISION) - BigInt(1)) / BigInt(VARIABLE_FEE_PRECISION);
      return variableFee;
    }
    return variableFeeControl;
  };
  _proto2.getBaseFee = function getBaseFee(binStep, baseFactor) {
    return BigInt(binStep) * BigInt(baseFactor) * BigInt(10);
  };
  _proto2.getFeeForAmount = function getFeeForAmount(amount, fee) {
    var denominator = BigInt(PRECISION) - fee;
    var feeForAmount = (amount * fee + denominator - BigInt(1)) / denominator;
    return feeForAmount;
  };
  _proto2.getFeeAmount = function getFeeAmount(amount, fee) {
    var feeAmount = (amount * fee + BigInt(PRECISION) - BigInt(1)) / BigInt(PRECISION);
    return feeAmount;
  };
  _proto2.getProtocolFee = function getProtocolFee(fee, protocolShare) {
    var protocolFee = fee * protocolShare / BigInt(BASIS_POINT_MAX);
    return protocolFee;
  };
  _proto2.getTotalFee = function getTotalFee(pairInfo) {
    return this.getBaseFee(pairInfo.binStep, pairInfo.staticFeeParameters.baseFactor) + this.getVariableFee(pairInfo);
  };
  _proto2.moveActiveId = function moveActiveId(pairId, swapForY) {
    if (swapForY) {
      return pairId - 1;
    } else {
      return pairId + 1;
    }
  }
  /**
   * Calculates the input amount required for a swap based on the desired output amount and price.
   *
   * @param amountOut - The desired output amount as a bigint.
   * @param priceScaled - The scaled price as a bigint.
   * @param scaleOffset - The scaling factor used for price adjustments.
   * @param swapForY - A boolean indicating the direction of the swap
   * @param rounding - Specifies the rounding mode
   * @returns The calculated input amount as a bigint.
   */;
  _proto2.calcAmountInByPrice = function calcAmountInByPrice(amountOut, priceScaled, scaleOffset, swapForY, rounding) {
    if (swapForY) {
      // amountIn = (amountOut << scaleOffset) / priceScaled
      return rounding === "up" ? ((amountOut << BigInt(scaleOffset)) + priceScaled - BigInt(1)) / priceScaled : (amountOut << BigInt(scaleOffset)) / priceScaled;
    } else {
      // amountIn = (amountOut * priceScaled) >> scaleOffset
      return rounding === "up" ? amountOut * priceScaled + (BigInt(1) << BigInt(scaleOffset)) - BigInt(1) >> BigInt(scaleOffset) : amountOut * priceScaled >> BigInt(scaleOffset);
    }
  }
  /**
   * Calculates the output amount based on the input amount, price, and scaling factors.
   *
   * @param amountIn - The input amount as a bigint.
   * @param priceScaled - The scaled price as a bigint.
   * @param scaleOffset - The scaling offset as a number, used to adjust the precision.
   * @param swapForY - A boolean indicating the direction of the swap
   * @param rounding - The rounding mode to apply when calculating the output amount
   * @returns The calculated output amount as a bigint.
   */;
  _proto2.calcAmountOutByPrice = function calcAmountOutByPrice(amountIn, priceScaled, scaleOffset, swapForY, rounding) {
    if (swapForY) {
      // price = (Y / X) & swapForY => amountOut = amountIn * price
      // amountOut = (amountIn * priceScaled) >> scaleOffset
      return rounding === "up" ? amountIn * priceScaled + (BigInt(1) << BigInt(scaleOffset)) - BigInt(1) >> BigInt(scaleOffset) : amountIn * priceScaled >> BigInt(scaleOffset);
    } else {
      // price = (X / Y) & !swapForY => amountOut = amountIn / price
      // amountOut = (amountIn << scaleOffset) / priceScaled
      return rounding === "up" ? ((amountIn << BigInt(scaleOffset)) + priceScaled - BigInt(1)) / priceScaled : (amountIn << BigInt(scaleOffset)) / priceScaled;
    }
  };
  return LBSwapService;
}();

var divRem = function divRem(numerator, denominator) {
  if (denominator === 0) {
    throw new Error('Division by zero'); // Xử lý lỗi chia cho 0
  }
  // Tính thương và phần dư
  var quotient = numerator / denominator; // Thương
  var remainder = numerator % denominator; // Phần dư
  return [quotient, remainder]; // Trả về mảng chứa thương và phần dư
};
/// (x * y) / denominator
var mulDiv = function mulDiv(x, y, denominator, rounding) {
  var prod = x * y;
  if (rounding === 'up') {
    return Math.floor((prod + denominator - 1) / denominator);
  }
  if (rounding === 'down') {
    var _divRem = divRem(prod, denominator),
      quotient = _divRem[0];
    return quotient;
  }
};
var mulShr = function mulShr(x, y, offset, rounding) {
  var denominator = 1 << offset;
  return mulDiv(x, y, denominator, rounding);
};
// (x << offset) / y
var shlDiv = function shlDiv(x, y, offset, rounding) {
  var scale = 1 << offset;
  return mulDiv(x, scale, y, rounding);
};

var getCurveDistributionFromBinRange = function getCurveDistributionFromBinRange(binRange) {
  var activeId = 0;
  // init return values
  var deltaIds = [],
    _distributionX = [],
    _distributionY = [];
  // get sigma based on radius R
  var getSigma = function getSigma(_R) {
    var factor = _R >= 20 ? 2.0 : _R >= 15 ? 1.8 : _R >= 10 ? 1.7 : _R >= 8 ? 1.6 : _R >= 6 ? 1.5 : _R >= 5 ? 1.4 : 1.0;
    return _R / factor;
  };
  // range only includes B tokens (Y tokens)
  if (binRange[1] < activeId) {
    var negDelta = binRange[1] - binRange[0] + 1;
    var negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys()).reverse().slice(0, negDelta).map(function (el) {
      return -1 * (el + 1);
    });
    deltaIds = [].concat(negativeDeltaIds);
    if (activeId === binRange[1]) {
      deltaIds.push(0);
    }
    _distributionX = [].concat(Array(deltaIds.length).fill(0));
    // radius is num of bins
    var R = deltaIds.length - 1;
    var sigma = getSigma(R);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var A = 1 / (Math.sqrt(Math.PI * 2) * sigma);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from right-most bin
    _distributionY = deltaIds.map(function (_, ind) {
      return 2 * A * Math.exp(-0.5 * Math.pow((R - ind) / sigma, 2));
    });
  }
  // range only includes A tokens (X tokens)
  else if (activeId < binRange[0]) {
    var posDelta = binRange[1] - binRange[0] + 1;
    var positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys()).reverse().slice(0, posDelta).reverse().map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(positiveDeltaIds);
    if (activeId === binRange[0]) {
      deltaIds.unshift(0);
    }
    _distributionY = [].concat(Array(deltaIds.length).fill(0));
    // radius is num of bins
    var _R2 = deltaIds.length - 1;
    var _sigma = getSigma(_R2);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var _A = 1 / (Math.sqrt(Math.PI * 2) * _sigma);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from left-most bin
    _distributionX = deltaIds.map(function (_, ind) {
      return 2 * _A * Math.exp(-0.5 * Math.pow(ind / _sigma, 2));
    });
  }
  // range includes both X and Y tokens
  else {
    var _negDelta = activeId - binRange[0];
    var _posDelta = binRange[1] - activeId;
    var _negativeDeltaIds = Array.from(Array(_negDelta).keys()).reverse().map(function (el) {
      return -1 * (el + 1);
    });
    var _positiveDeltaIds = Array.from(Array(_posDelta).keys()).map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(_negativeDeltaIds, [0], _positiveDeltaIds);
    // radius is num of bins
    var RX = _positiveDeltaIds.length;
    var sigmaX = getSigma(RX);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var AX = RX === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaX);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from 0
    _distributionX = [].concat(Array(_negDelta).fill(0), [AX], _positiveDeltaIds.map(function (_, ind) {
      return 2 * AX * Math.exp(-0.5 * Math.pow((ind + 1) / sigmaX, 2));
    }));
    // radius is num of bins
    var RY = _negativeDeltaIds.length;
    var sigmaY = getSigma(RY);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var AY = RY === 0 ? 1 : 1 / (Math.sqrt(Math.PI * 2) * sigmaY);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from 0
    _distributionY = [].concat(_negativeDeltaIds.map(function (_, ind) {
      return 2 * AY * Math.exp(-0.5 * Math.pow((RY - ind) / sigmaY, 2));
    }), [AY], Array(_posDelta).fill(0));
  }
  var liquidityDistributionX = _distributionX.map(function (i) {
    return Math.floor(i * MAX_BASIS_POINTS);
  });
  var liquidityDistributionY = _distributionY.map(function (i) {
    return Math.floor(i * MAX_BASIS_POINTS);
  });
  // check totalX and totalY with MAX_BASIS_POINTS
  var totalX = liquidityDistributionX.reduce(function (acc, val) {
    return acc + val;
  }, 0);
  var totalY = liquidityDistributionY.reduce(function (acc, val) {
    return acc + val;
  }, 0);
  if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {
    var isOverflow = totalX > MAX_BASIS_POINTS;
    var overPoint = Math.abs(totalX - MAX_BASIS_POINTS);
    var numberBins = liquidityDistributionX.filter(function (i) {
      return i > 0;
    }).length;
    var _divRem = divRem(overPoint, numberBins),
      quotient = _divRem[0],
      remainder = _divRem[1];
    liquidityDistributionX = liquidityDistributionX.map(function (i) {
      if (i === 0) return i;
      return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);
    });
    var remainderLeft = remainder;
    if (remainder > 0) {
      if (!isOverflow) {
        liquidityDistributionX = liquidityDistributionX.map(function (i) {
          if (i === 0) return i;
          if (remainderLeft > 0) {
            remainderLeft--;
            return i + 1;
          }
          return i;
        });
      } else {
        var reverseLiquid = liquidityDistributionX.reverse().map(function (i) {
          if (i === 0) return i;
          if (remainderLeft > 0) {
            remainderLeft--;
            return i - 1;
          }
          return i;
        });
        liquidityDistributionX = reverseLiquid.reverse();
      }
    }
  }
  if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {
    var _isOverflow = totalY > MAX_BASIS_POINTS;
    var _overPoint = Math.abs(totalY - MAX_BASIS_POINTS);
    var _numberBins = liquidityDistributionY.filter(function (i) {
      return i > 0;
    }).length;
    var _divRem2 = divRem(_overPoint, _numberBins),
      _quotient = _divRem2[0],
      _remainder = _divRem2[1];
    liquidityDistributionY = liquidityDistributionY.map(function (i, idx) {
      if (i === 0) return i;
      if (_remainder > 0 && idx === _numberBins - 1) {
        return _isOverflow ? i - Math.floor(_quotient) - _remainder : i + Math.floor(_quotient) + _remainder;
      }
      return _isOverflow ? i - Math.floor(_quotient) : i + Math.floor(_quotient);
    });
  }
  //return
  var liquidityDistribution = deltaIds.map(function (i, idx) {
    return {
      relativeBinId: i,
      distributionX: liquidityDistributionX[idx],
      distributionY: liquidityDistributionY[idx]
    };
  });
  return liquidityDistribution;
};
function createUniformDistribution(params) {
  var shape = params.shape,
    binRange = params.binRange;
  var minBin = binRange[0],
    maxBin = binRange[1];
  if (minBin > maxBin) {
    throw new Error("Invalid binRange: minBin must be <= maxBin");
  }
  var relativeIds = Array.from({
    length: maxBin - minBin + 1
  }, function (_, i) {
    return i + minBin;
  });
  if (shape === LiquidityShape.Spot) {
    var totalArrayLength = maxBin - minBin + 1;
    var findActiveBinIndex = relativeIds.findIndex(function (item) {
      return item === 0;
    });
    if (findActiveBinIndex === -1) {
      var isOnlyX = minBin > 0;
      var isOnlyY = maxBin < 0;
      var distribution = MAX_BASIS_POINTS / totalArrayLength;
      return relativeIds.map(function (x) {
        return {
          relativeBinId: x,
          distributionX: isOnlyX ? distribution : 0,
          distributionY: isOnlyY ? distribution : 0
        };
      });
    }
    var totalYBin = Math.abs(minBin);
    var totalXBin = maxBin;
    var distributionX = Array.from({
      length: totalArrayLength
    }, function (_, i) {
      if (i < findActiveBinIndex) return 0;
      var pricePerBin = Math.floor(2 * MAX_BASIS_POINTS / (totalXBin * 2 + 1));
      if (i === findActiveBinIndex) return MAX_BASIS_POINTS - pricePerBin * totalXBin;
      return pricePerBin;
    });
    var distributionY = Array.from({
      length: totalArrayLength
    }, function (_, i) {
      if (i > findActiveBinIndex) return 0;
      var pricePerBin = Math.floor(2 * MAX_BASIS_POINTS / (totalYBin * 2 + 1));
      if (i === findActiveBinIndex) return MAX_BASIS_POINTS - pricePerBin * totalYBin;
      return pricePerBin;
    });
    return relativeIds.map(function (x, i) {
      return {
        relativeBinId: x,
        distributionX: distributionX[i],
        distributionY: distributionY[i]
      };
    });
  }
  if (shape === LiquidityShape.Curve) {
    return getCurveDistributionFromBinRange(binRange);
  }
  if (shape === LiquidityShape.BidAsk) {
    //MAX_BASIS_POINTS = 10000
    //binRange = [min, max]
    //activeid = 0
    var activeBin = 0;
    var _distributionY = [];
    var _distributionX = [];
    var deltaIds = [];
    if (maxBin < activeBin) {
      var negDelta = maxBin - minBin + 1;
      var negativeDeltaIds = Array.from(Array(activeBin - minBin).keys()).reverse().slice(0, negDelta).map(function (el) {
        return -1 * (el + 1);
      });
      deltaIds = [].concat(negativeDeltaIds);
      _distributionX = [].concat(Array(deltaIds.length).fill(0));
      // dist = 2/R^2 * r
      var rSquare = Math.pow(deltaIds[0], 2);
      _distributionY = deltaIds.map(function (i) {
        return (i - 1) * -2 / rSquare;
      });
    } else if (activeBin < minBin) {
      var posDelta = binRange[1] - binRange[0] + 1;
      var positiveDeltaIds = Array.from(Array(binRange[1] - activeBin).keys()).reverse().slice(0, posDelta).reverse().map(function (el) {
        return el + 1;
      });
      deltaIds = [].concat(positiveDeltaIds);
      // dist = 2/R^2 * i
      var _rSquare = Math.pow(deltaIds[deltaIds.length - 1], 2);
      _distributionX = deltaIds.map(function (i) {
        return (i + 1) * 2 / _rSquare;
      });
      _distributionY = [].concat(Array(deltaIds.length).fill(0));
    } else {
      var _negDelta2 = activeBin - binRange[0];
      var _posDelta2 = binRange[1] - activeBin;
      var _negativeDeltaIds2 = Array.from(Array(_negDelta2).keys()).reverse().map(function (el) {
        return -1 * (el + 1);
      });
      var _positiveDeltaIds2 = Array.from(Array(_posDelta2).keys()).map(function (el) {
        return el + 1;
      });
      deltaIds = [].concat(_negativeDeltaIds2, [0], _positiveDeltaIds2);
      // dist = 1/R^2 * i
      var rSquareX = _positiveDeltaIds2.length === 0 ? 1 : _positiveDeltaIds2.length === 1 && _positiveDeltaIds2[0] === 1 ? 3 : Math.pow(_positiveDeltaIds2[_positiveDeltaIds2.length - 1], 2);
      _distributionX = [].concat(Array(_negDelta2).fill(0), [1 / rSquareX], _positiveDeltaIds2.map(function (i) {
        return (i + 1) / rSquareX;
      }));
      // dist = 1/R^2 * i
      var rSquareY = _negativeDeltaIds2.length === 0 ? 1 : _negativeDeltaIds2[0] === -1 ? 3 : Math.pow(_negativeDeltaIds2[0], 2);
      _distributionY = [].concat(_negativeDeltaIds2.map(function (i) {
        return -1 * (i - 1) / rSquareY;
      }), [1 / rSquareY], Array(_posDelta2).fill(0));
    }
    var liquidityDistributionX = _distributionX.map(function (i) {
      return Math.floor(i * MAX_BASIS_POINTS);
    });
    var liquidityDistributionY = _distributionY.map(function (i) {
      return Math.floor(i * MAX_BASIS_POINTS);
    });
    // check totalX and totalY with MAX_BASIS_POINTS
    var totalX = liquidityDistributionX.reduce(function (acc, val) {
      return acc + val;
    }, 0);
    var totalY = liquidityDistributionY.reduce(function (acc, val) {
      return acc + val;
    }, 0);
    if (totalX > 0 && totalX !== MAX_BASIS_POINTS) {
      var isOverflow = totalX > MAX_BASIS_POINTS;
      var overPoint = Math.abs(totalX - MAX_BASIS_POINTS);
      var numberBins = liquidityDistributionX.filter(function (i) {
        return i > 0;
      }).length;
      var _divRem3 = divRem(overPoint, numberBins),
        quotient = _divRem3[0],
        remainder = _divRem3[1];
      liquidityDistributionX = liquidityDistributionX.map(function (i) {
        if (i === 0) return i;
        return isOverflow ? i - Math.floor(quotient) : i + Math.floor(quotient);
      });
      var remainderLeft = remainder;
      if (remainder > 0) {
        if (!isOverflow) {
          liquidityDistributionX = liquidityDistributionX.map(function (i) {
            if (i === 0) return i;
            if (remainderLeft > 0) {
              remainderLeft--;
              return i + 1;
            }
            return i;
          });
        } else {
          var reverseLiquid = liquidityDistributionX.reverse().map(function (i) {
            if (i === 0) return i;
            if (remainderLeft > 0) {
              remainderLeft--;
              return i - 1;
            }
            return i;
          });
          liquidityDistributionX = reverseLiquid.reverse();
        }
      }
    }
    if (totalY > 0 && totalY !== MAX_BASIS_POINTS) {
      var _isOverflow2 = totalY > MAX_BASIS_POINTS;
      var _overPoint2 = Math.abs(totalY - MAX_BASIS_POINTS);
      var _numberBins2 = liquidityDistributionY.filter(function (i) {
        return i > 0;
      }).length;
      var _divRem4 = divRem(_overPoint2, _numberBins2),
        _quotient2 = _divRem4[0],
        _remainder2 = _divRem4[1];
      liquidityDistributionY = liquidityDistributionY.map(function (i, idx) {
        if (i === 0) return i;
        if (_remainder2 > 0 && idx === 0) {
          return _isOverflow2 ? i - Math.floor(_quotient2) - _remainder2 : i + Math.floor(_quotient2) + _remainder2;
        }
        return _isOverflow2 ? i - Math.floor(_quotient2) : i + Math.floor(_quotient2);
      });
    }
    var liquidityDistribution = deltaIds.map(function (i, idx) {
      return {
        relativeBinId: i,
        distributionX: liquidityDistributionX[idx],
        distributionY: liquidityDistributionY[idx]
      };
    });
    return liquidityDistribution;
  }
  throw new Error("Unsupported liquidity shape: " + shape);
}
var getMaxPosition = function getMaxPosition(range, activeId) {
  var leftRangeIndex = Math.floor(activeId / 16);
  var rangeFromIndex = [Math.floor((activeId + range[0]) / 16), Math.floor((activeId + range[1]) / 16)];
  var positions = Array.from({
    length: rangeFromIndex[1] - rangeFromIndex[0] + 1
  }, function (_, index) {
    return rangeFromIndex[0] + index - leftRangeIndex;
  });
  return positions;
};
var getMaxBinArray = function getMaxBinArray(range, activeId) {
  var arrayIndex = [activeId + range[0], activeId + range[1]];
  var binIndex = [Math.floor(arrayIndex[0] / BIN_ARRAY_SIZE), Math.floor(arrayIndex[1] / BIN_ARRAY_SIZE)];
  // check if binArrayLower, binArrayUpper is the same
  if (binIndex[1] === binIndex[0]) {
    binIndex[1] += 1;
  }
  var binArrayIndexLen = binIndex[1] - binIndex[0] - 1;
  var binArrayList = Array.from({
    length: binArrayIndexLen + 1
  }, function (_, i) {
    var index = binIndex[0] + i * 2;
    return {
      binArrayLowerIndex: index,
      binArrayUpperIndex: index + 1
    };
  });
  return binArrayList;
};
var getBinRange = function getBinRange(index, activeId) {
  var firstBinId = Math.floor(activeId % 16);
  var firstArray = [-firstBinId, -firstBinId + 16 - 1];
  var range = [firstArray[0] + index * FIXED_LENGTH, firstArray[1] + index * FIXED_LENGTH];
  return {
    range: range,
    binLower: activeId + range[0],
    binUpper: activeId + range[1] - 1
  };
};
var findPosition = function findPosition(index, activeBin) {
  if (activeBin === void 0) {
    activeBin = ACTIVE_ID;
  }
  return function (position) {
    var _getBinRange = getBinRange(index, activeBin),
      binLower = _getBinRange.binLower,
      binUpper = _getBinRange.binUpper;
    return position.lowerBinId <= binLower && position.upperBinId >= binUpper;
  };
};
var getGasPrice = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(connection) {
    var buffNum;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          buffNum = 1;
          _context2.p = 1;
          _context2.n = 2;
          return new Promise(/*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(resolve) {
              var timeout, getPriority, currentFee, unitPrice;
              return _regenerator().w(function (_context) {
                while (1) switch (_context.n) {
                  case 0:
                    timeout = setTimeout(function () {
                      resolve(UNIT_PRICE_DEFAULT * buffNum);
                    }, 2000);
                    _context.n = 1;
                    return connection.getRecentPrioritizationFees();
                  case 1:
                    getPriority = _context.v;
                    currentFee = getPriority.filter(function (fee) {
                      return (fee == null ? void 0 : fee.prioritizationFee) > 0;
                    }).map(function (fee) {
                      return fee == null ? void 0 : fee.prioritizationFee;
                    });
                    clearTimeout(timeout);
                    unitPrice = currentFee.length > 0 ? Math.max.apply(Math, currentFee.concat([UNIT_PRICE_DEFAULT])) : UNIT_PRICE_DEFAULT;
                    resolve(unitPrice * buffNum);
                  case 2:
                    return _context.a(2);
                }
              }, _callee);
            }));
            return function (_x2) {
              return _ref2.apply(this, arguments);
            };
          }());
        case 2:
          return _context2.a(2, _context2.v);
        case 3:
          _context2.p = 3;
          return _context2.a(2, UNIT_PRICE_DEFAULT * buffNum);
      }
    }, _callee2, null, [[1, 3]]);
  }));
  return function getGasPrice(_x) {
    return _ref.apply(this, arguments);
  };
}();

var LiquidityBookServices = /*#__PURE__*/function (_LiquidityBookAbstrac) {
  function LiquidityBookServices(config) {
    return _LiquidityBookAbstrac.call(this, config) || this;
  }
  _inheritsLoose(LiquidityBookServices, _LiquidityBookAbstrac);
  var _proto = LiquidityBookServices.prototype;
  _proto.getPairAccount = /*#__PURE__*/function () {
    var _getPairAccount = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(pair) {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _context.n = 1;
            return this.lbProgram.account.pair.fetch(pair);
          case 1:
            return _context.a(2, _context.v);
        }
      }, _callee, this);
    }));
    function getPairAccount(_x) {
      return _getPairAccount.apply(this, arguments);
    }
    return getPairAccount;
  }();
  _proto.getPositionAccount = /*#__PURE__*/function () {
    var _getPositionAccount = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(position) {
      return _regenerator().w(function (_context2) {
        while (1) switch (_context2.n) {
          case 0:
            _context2.n = 1;
            return this.lbProgram.account.position.fetch(position);
          case 1:
            return _context2.a(2, _context2.v);
        }
      }, _callee2, this);
    }));
    function getPositionAccount(_x2) {
      return _getPositionAccount.apply(this, arguments);
    }
    return getPositionAccount;
  }();
  _proto.getBinArray = /*#__PURE__*/function () {
    var _getBinArray = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee3(params) {
      var binArrayIndex, pair, payer, transaction, binArray, binArrayInfo, initializebinArrayConfigTx;
      return _regenerator().w(function (_context3) {
        while (1) switch (_context3.n) {
          case 0:
            binArrayIndex = params.binArrayIndex, pair = params.pair, payer = params.payer, transaction = params.transaction;
            binArray = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_array")), pair.toBuffer(), new BN(binArrayIndex).toArrayLike(Buffer$1, "le", 4)], this.lbProgram.programId)[0];
            if (!(transaction && payer)) {
              _context3.n = 3;
              break;
            }
            _context3.n = 1;
            return this.connection.getAccountInfo(binArray);
          case 1:
            binArrayInfo = _context3.v;
            if (binArrayInfo) {
              _context3.n = 3;
              break;
            }
            _context3.n = 2;
            return this.lbProgram.methods.initializeBinArray(binArrayIndex).accountsPartial({
              pair: pair,
              binArray: binArray,
              user: payer
            }).instruction();
          case 2:
            initializebinArrayConfigTx = _context3.v;
            transaction.add(initializebinArrayConfigTx);
          case 3:
            return _context3.a(2, binArray);
        }
      }, _callee3, this);
    }));
    function getBinArray(_x3) {
      return _getBinArray.apply(this, arguments);
    }
    return getBinArray;
  }();
  _proto.getBinArrayInfo = /*#__PURE__*/function () {
    var _getBinArrayInfo = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee4(params) {
      var binArrayIndex, pair, payer, resultIndex, result, binArray, _yield$this$lbProgram, bins, binArrayOther, res, _binArrayOther, _res;
      return _regenerator().w(function (_context4) {
        while (1) switch (_context4.n) {
          case 0:
            binArrayIndex = params.binArrayIndex, pair = params.pair, payer = params.payer;
            resultIndex = binArrayIndex;
            result = [];
            _context4.n = 1;
            return this.getBinArray({
              binArrayIndex: binArrayIndex,
              pair: pair,
              payer: payer
            });
          case 1:
            binArray = _context4.v;
            _context4.n = 2;
            return this.lbProgram.account.binArray.fetch(binArray);
          case 2:
            _yield$this$lbProgram = _context4.v;
            bins = _yield$this$lbProgram.bins;
            _context4.p = 3;
            _context4.n = 4;
            return this.getBinArray({
              binArrayIndex: binArrayIndex + 1,
              pair: pair,
              payer: payer
            });
          case 4:
            binArrayOther = _context4.v;
            _context4.n = 5;
            return this.lbProgram.account.binArray.fetch(binArrayOther);
          case 5:
            res = _context4.v;
            result = [].concat(bins, res.bins);
            _context4.n = 9;
            break;
          case 6:
            _context4.p = 6;
            _context4.n = 7;
            return this.getBinArray({
              binArrayIndex: binArrayIndex - 1,
              pair: pair,
              payer: payer
            });
          case 7:
            _binArrayOther = _context4.v;
            _context4.n = 8;
            return this.lbProgram.account.binArray.fetch(_binArrayOther);
          case 8:
            _res = _context4.v;
            result = [].concat(_res.bins, bins);
            resultIndex -= 1;
          case 9:
            return _context4.a(2, {
              bins: result,
              resultIndex: resultIndex
            });
        }
      }, _callee4, this, [[3, 6]]);
    }));
    function getBinArrayInfo(_x4) {
      return _getBinArrayInfo.apply(this, arguments);
    }
    return getBinArrayInfo;
  }();
  _proto.getBinsReserveInformation = /*#__PURE__*/function () {
    var _getBinsReserveInformation = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee5(params) {
      var position, pair, payer, positionInfo, firstBinId, binArrayIndex, _yield$this$getBinArr, bins, resultIndex, firstBinIndex, binIds, reserveXY;
      return _regenerator().w(function (_context5) {
        while (1) switch (_context5.n) {
          case 0:
            position = params.position, pair = params.pair, payer = params.payer;
            _context5.n = 1;
            return this.getPositionAccount(position);
          case 1:
            positionInfo = _context5.v;
            firstBinId = positionInfo.lowerBinId;
            binArrayIndex = Math.floor(firstBinId / BIN_ARRAY_SIZE);
            _context5.n = 2;
            return this.getBinArrayInfo({
              binArrayIndex: binArrayIndex,
              pair: pair,
              payer: payer
            });
          case 2:
            _yield$this$getBinArr = _context5.v;
            bins = _yield$this$getBinArr.bins;
            resultIndex = _yield$this$getBinArr.resultIndex;
            firstBinIndex = resultIndex * BIN_ARRAY_SIZE;
            binIds = Array.from({
              length: positionInfo.upperBinId - firstBinId + 1
            }, function (_, i) {
              return firstBinId - firstBinIndex + i;
            });
            reserveXY = binIds.map(function (binId, index) {
              var liquidityShare = positionInfo.liquidityShares[index].toString();
              var activeBin = bins[binId];
              if (activeBin) {
                var totalReserveX = +BigInt(activeBin.reserveX).toString();
                var totalReserveY = +BigInt(activeBin.reserveY).toString();
                var totalSupply = +BigInt(activeBin.totalSupply).toString();
                var reserveX = Number(totalReserveX) > 0 ? mulDiv(Number(liquidityShare), Number(totalReserveX), Number(totalSupply), "down") : 0;
                var reserveY = Number(totalReserveY) > 0 ? mulDiv(Number(liquidityShare), Number(totalReserveY), Number(totalSupply), "down") : 0;
                return {
                  reserveX: reserveX || 0,
                  reserveY: reserveY || 0,
                  totalSupply: +BigInt(activeBin.totalSupply).toString(),
                  binId: firstBinId + index,
                  binPosistion: binId,
                  liquidityShare: positionInfo.liquidityShares[index]
                };
              }
              return {
                reserveX: 0,
                reserveY: 0,
                totalSupply: "0",
                binId: firstBinId + index,
                binPosistion: binId,
                liquidityShare: liquidityShare
              };
            });
            return _context5.a(2, reserveXY);
        }
      }, _callee5, this);
    }));
    function getBinsReserveInformation(_x5) {
      return _getBinsReserveInformation.apply(this, arguments);
    }
    return getBinsReserveInformation;
  }();
  _proto.createPairWithConfig = /*#__PURE__*/function () {
    var _createPairWithConfig = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee6(params) {
      var tokenBase, tokenQuote, binStep, ratePrice, payer, tokenX, tokenY, id, binArrayIndex, tx, binStepConfig, quoteAssetBadge, pair, initializePairConfigTx, binArrayLower, binArrayUpper, initializeBinArrayLowerConfigTx, initializeBinArrayUpperConfigTx;
      return _regenerator().w(function (_context6) {
        while (1) switch (_context6.n) {
          case 0:
            tokenBase = params.tokenBase, tokenQuote = params.tokenQuote, binStep = params.binStep, ratePrice = params.ratePrice, payer = params.payer;
            tokenX = new PublicKey(tokenBase.mintAddress);
            tokenY = new PublicKey(tokenQuote.mintAddress);
            id = getIdFromPrice(ratePrice || 1, binStep, tokenBase.decimal, tokenQuote.decimal);
            binArrayIndex = id / BIN_ARRAY_SIZE;
            if (id % BIN_ARRAY_SIZE < BIN_ARRAY_SIZE / 2) {
              binArrayIndex -= 1;
            }
            tx = new Transaction();
            binStepConfig = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_step_config")), this.lbConfig.toBuffer(), new Uint8Array([binStep])], this.lbProgram.programId)[0];
            quoteAssetBadge = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("quote_asset_badge")), this.lbConfig.toBuffer(), tokenY.toBuffer()], this.lbProgram.programId)[0];
            pair = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("pair")), this.lbConfig.toBuffer(), tokenX.toBuffer(), tokenY.toBuffer(), new Uint8Array([binStep])], this.lbProgram.programId)[0];
            _context6.n = 1;
            return this.lbProgram.methods.initializePair(id).accountsPartial({
              liquidityBookConfig: this.lbConfig,
              binStepConfig: binStepConfig,
              quoteAssetBadge: quoteAssetBadge,
              pair: pair,
              tokenMintX: tokenX,
              tokenMintY: tokenY,
              user: payer
            }).instruction();
          case 1:
            initializePairConfigTx = _context6.v;
            tx.add(initializePairConfigTx);
            binArrayLower = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_array")), pair.toBuffer(), new BN(binArrayIndex).toArrayLike(Buffer$1, "le", 4)], this.lbProgram.programId)[0];
            binArrayUpper = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_array")), pair.toBuffer(), new BN(Number(binArrayIndex) + 1).toArrayLike(Buffer$1, "le", 4)], this.lbProgram.programId)[0];
            _context6.n = 2;
            return this.lbProgram.methods.initializeBinArray(binArrayIndex).accountsPartial({
              pair: pair,
              binArray: binArrayLower,
              user: payer
            }).instruction();
          case 2:
            initializeBinArrayLowerConfigTx = _context6.v;
            tx.add(initializeBinArrayLowerConfigTx);
            _context6.n = 3;
            return this.lbProgram.methods.initializeBinArray(new BN(binArrayIndex + 1)).accountsPartial({
              pair: pair,
              binArray: binArrayUpper,
              user: payer
            }).instruction();
          case 3:
            initializeBinArrayUpperConfigTx = _context6.v;
            tx.add(initializeBinArrayUpperConfigTx);
            return _context6.a(2, {
              tx: tx,
              pair: pair.toString(),
              binArrayLower: binArrayLower.toString(),
              binArrayUpper: binArrayUpper.toString(),
              hooksConfig: this.hooksConfig.toString(),
              activeBin: Number(id)
            });
        }
      }, _callee6, this);
    }));
    function createPairWithConfig(_x6) {
      return _createPairWithConfig.apply(this, arguments);
    }
    return createPairWithConfig;
  }();
  _proto.createPosition = /*#__PURE__*/function () {
    var _createPosition = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee7(params) {
      var payer, relativeBinIdLeft, relativeBinIdRight, pair, binArrayIndex, positionMint, transaction, position, positionVault, initializePositionTx;
      return _regenerator().w(function (_context7) {
        while (1) switch (_context7.n) {
          case 0:
            payer = params.payer, relativeBinIdLeft = params.relativeBinIdLeft, relativeBinIdRight = params.relativeBinIdRight, pair = params.pair, binArrayIndex = params.binArrayIndex, positionMint = params.positionMint, transaction = params.transaction;
            position = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("position")), positionMint.toBuffer()], this.lbProgram.programId)[0];
            positionVault = getAssociatedTokenAddressSync(positionMint, payer, true, TOKEN_2022_PROGRAM_ID);
            _context7.n = 1;
            return this.getBinArray({
              binArrayIndex: binArrayIndex,
              pair: pair,
              payer: payer
            });
          case 1:
            _context7.n = 2;
            return this.getBinArray({
              binArrayIndex: binArrayIndex + 1,
              pair: pair,
              payer: payer
            });
          case 2:
            _context7.n = 3;
            return this.lbProgram.methods.createPosition(new BN(relativeBinIdLeft), new BN(relativeBinIdRight)).accountsPartial({
              pair: pair,
              position: position,
              positionMint: positionMint,
              positionTokenAccount: positionVault,
              tokenProgram: TOKEN_2022_PROGRAM_ID,
              user: payer
            }).instruction();
          case 3:
            initializePositionTx = _context7.v;
            transaction.add(initializePositionTx);
            return _context7.a(2, {
              position: position.toString()
            });
        }
      }, _callee7, this);
    }));
    function createPosition(_x7) {
      return _createPosition.apply(this, arguments);
    }
    return createPosition;
  }();
  _proto.addLiquidityIntoPosition = /*#__PURE__*/function () {
    var _addLiquidityIntoPosition = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee8(params) {
      var _Number, _this$bufferGas;
      var positionMint, payer, pair, binArrayLower, binArrayUpper, transaction, liquidityDistribution, amountX, amountY, pairInfo, tokenProgramX, tokenProgramY, associatedPairVaultX, associatedPairVaultY, associatedUserVaultX, associatedUserVaultY, isNativeY, totalAmount, totalLiquid, amount, associatedUserVault, unitSPrice, unitPrice, hook, position, positionVault, addLiquidityInstructions;
      return _regenerator().w(function (_context8) {
        while (1) switch (_context8.n) {
          case 0:
            positionMint = params.positionMint, payer = params.payer, pair = params.pair, binArrayLower = params.binArrayLower, binArrayUpper = params.binArrayUpper, transaction = params.transaction, liquidityDistribution = params.liquidityDistribution, amountX = params.amountX, amountY = params.amountY;
            _context8.n = 1;
            return this.getPairAccount(pair);
          case 1:
            pairInfo = _context8.v;
            _context8.n = 2;
            return getProgram(pairInfo.tokenMintX, this.connection);
          case 2:
            tokenProgramX = _context8.v;
            _context8.n = 3;
            return getProgram(pairInfo.tokenMintY, this.connection);
          case 3:
            tokenProgramY = _context8.v;
            _context8.n = 4;
            return this.getPairVaultInfo({
              tokenAddress: pairInfo.tokenMintX,
              pair: pair
            });
          case 4:
            associatedPairVaultX = _context8.v;
            _context8.n = 5;
            return this.getPairVaultInfo({
              tokenAddress: pairInfo.tokenMintY,
              pair: pair
            });
          case 5:
            associatedPairVaultY = _context8.v;
            _context8.n = 6;
            return this.getUserVaultInfo({
              tokenAddress: pairInfo.tokenMintX,
              payer: payer
            });
          case 6:
            associatedUserVaultX = _context8.v;
            _context8.n = 7;
            return this.getUserVaultInfo({
              tokenAddress: pairInfo.tokenMintY,
              payer: payer
            });
          case 7:
            associatedUserVaultY = _context8.v;
            if (pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS || pairInfo.tokenMintX.toString() === WRAP_SOL_ADDRESS) {
              isNativeY = pairInfo.tokenMintY.toString() === WRAP_SOL_ADDRESS;
              totalAmount = isNativeY ? amountY : amountX;
              totalLiquid = liquidityDistribution.reduce(function (prev, curr) {
                var currAmount = isNativeY ? curr.distributionY : curr.distributionX;
                return prev + currAmount;
              }, 0);
              if (totalLiquid) {
                amount = totalLiquid * totalAmount / MAX_BASIS_POINTS;
                associatedUserVault = isNativeY ? associatedUserVaultY : associatedUserVaultX;
                transaction.add(SystemProgram.transfer({
                  fromPubkey: payer,
                  toPubkey: associatedUserVault,
                  lamports: amount
                }));
                transaction.add(createSyncNativeInstruction(associatedUserVault));
              }
            }
            _context8.n = 8;
            return getGasPrice(this.connection)["catch"](function () {
              return undefined;
            });
          case 8:
            unitSPrice = _context8.v;
            unitPrice = Math.max((_Number = Number(unitSPrice)) != null ? _Number : 0, UNIT_PRICE_DEFAULT * ((_this$bufferGas = this.bufferGas) != null ? _this$bufferGas : 1));
            hook = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("hook")), this.hooksConfig.toBuffer(), pair.toBuffer()], this.hooksProgram.programId)[0];
            position = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("position")), positionMint.toBuffer()], this.lbProgram.programId)[0];
            positionVault = getAssociatedTokenAddressSync(positionMint, payer, true, TOKEN_2022_PROGRAM_ID);
            _context8.n = 9;
            return this.lbProgram.methods.increasePosition(new BN(amountX), new BN(amountY), liquidityDistribution).accountsPartial({
              pair: pair,
              position: position,
              binArrayLower: binArrayLower,
              binArrayUpper: binArrayUpper,
              tokenVaultX: associatedPairVaultX,
              tokenVaultY: associatedPairVaultY,
              userVaultX: associatedUserVaultX,
              userVaultY: associatedUserVaultY,
              positionTokenAccount: positionVault,
              tokenMintX: pairInfo.tokenMintX,
              tokenMintY: pairInfo.tokenMintY,
              tokenProgramX: tokenProgramX,
              tokenProgramY: tokenProgramY,
              positionTokenProgram: TOKEN_2022_PROGRAM_ID,
              hook: hook,
              hooksProgram: this.hooksProgram.programId,
              user: payer,
              positionMint: positionMint
            }).remainingAccounts([{
              pubkey: pair,
              isWritable: false,
              isSigner: false
            }, {
              pubkey: binArrayLower,
              isWritable: false,
              isSigner: false
            }, {
              pubkey: binArrayUpper,
              isWritable: false,
              isSigner: false
            }]).instruction();
          case 9:
            addLiquidityInstructions = _context8.v;
            transaction.add(ComputeBudgetProgram.setComputeUnitLimit({
              units: CCU_LIMIT
            }));
            transaction.add(ComputeBudgetProgram.setComputeUnitPrice({
              microLamports: unitPrice
            }));
            transaction.add(addLiquidityInstructions);
          case 10:
            return _context8.a(2);
        }
      }, _callee8, this);
    }));
    function addLiquidityIntoPosition(_x8) {
      return _addLiquidityIntoPosition.apply(this, arguments);
    }
    return addLiquidityIntoPosition;
  }();
  _proto.removeMultipleLiquidity = /*#__PURE__*/function () {
    var _removeMultipleLiquidity = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee0(params) {
      var _Number2,
        _this$bufferGas2,
        _this = this;
      var maxPositionList, payer, type, pair, tokenMintX, tokenMintY, tokenProgramX, tokenProgramY, txCreateAccount, associatedPairVaultX, associatedPairVaultY, associatedUserVaultX, associatedUserVaultY, hook, associatedHookTokenY, infoHookTokenY, hookTokenYInstructions, unitSPrice, unitPrice, positionClosed, txs, txCloseAccount, isNativeY, associatedUserVault;
      return _regenerator().w(function (_context0) {
        while (1) switch (_context0.n) {
          case 0:
            maxPositionList = params.maxPositionList, payer = params.payer, type = params.type, pair = params.pair, tokenMintX = params.tokenMintX, tokenMintY = params.tokenMintY;
            _context0.n = 1;
            return getProgram(tokenMintX, this.connection);
          case 1:
            tokenProgramX = _context0.v;
            _context0.n = 2;
            return getProgram(tokenMintY, this.connection);
          case 2:
            tokenProgramY = _context0.v;
            txCreateAccount = new Transaction();
            _context0.n = 3;
            return this.getPairVaultInfo({
              tokenAddress: tokenMintX,
              pair: pair,
              payer: payer,
              transaction: txCreateAccount
            });
          case 3:
            associatedPairVaultX = _context0.v;
            _context0.n = 4;
            return this.getPairVaultInfo({
              tokenAddress: tokenMintY,
              pair: pair,
              payer: payer,
              transaction: txCreateAccount
            });
          case 4:
            associatedPairVaultY = _context0.v;
            _context0.n = 5;
            return this.getUserVaultInfo({
              tokenAddress: tokenMintX,
              payer: payer,
              transaction: txCreateAccount
            });
          case 5:
            associatedUserVaultX = _context0.v;
            _context0.n = 6;
            return this.getUserVaultInfo({
              tokenAddress: tokenMintY,
              payer: payer,
              transaction: txCreateAccount
            });
          case 6:
            associatedUserVaultY = _context0.v;
            hook = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("hook")), this.hooksConfig.toBuffer(), pair.toBuffer()], this.hooksProgram.programId)[0];
            associatedHookTokenY = getAssociatedTokenAddressSync(tokenMintY, hook, true, tokenProgramY);
            _context0.n = 7;
            return this.connection.getAccountInfo(associatedHookTokenY);
          case 7:
            infoHookTokenY = _context0.v;
            if (!infoHookTokenY) {
              hookTokenYInstructions = createAssociatedTokenAccountInstruction(payer, associatedHookTokenY, hook, tokenMintY, tokenProgramY);
              txCreateAccount.add(hookTokenYInstructions);
            }
            _context0.n = 8;
            return getGasPrice(this.connection)["catch"](function () {
              return undefined;
            });
          case 8:
            unitSPrice = _context0.v;
            unitPrice = Math.max((_Number2 = Number(unitSPrice)) != null ? _Number2 : 0, UNIT_PRICE_DEFAULT * ((_this$bufferGas2 = this.bufferGas) != null ? _this$bufferGas2 : 1));
            positionClosed = [];
            _context0.n = 9;
            return Promise.all(maxPositionList.map(/*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee9(_ref) {
                var position, start, end, positionMint, binArrayIndex, _yield$_this$getBinAr, resultIndex, binArrayLower, binArrayUpper, tx, positionVault, reserveXY, hookBinArrayLower, hookBinArrayUpper, hookPosition, removedShares, availableShares, isClosePosition, instructions, _this$lbProgram$metho, _instructions, _t2, _t3;
                return _regenerator().w(function (_context9) {
                  while (1) switch (_context9.n) {
                    case 0:
                      position = _ref.position, start = _ref.start, end = _ref.end, positionMint = _ref.positionMint;
                      binArrayIndex = Math.floor(start / BIN_ARRAY_SIZE);
                      _context9.n = 1;
                      return _this.getBinArrayInfo({
                        binArrayIndex: binArrayIndex,
                        pair: pair,
                        payer: payer
                      });
                    case 1:
                      _yield$_this$getBinAr = _context9.v;
                      resultIndex = _yield$_this$getBinAr.resultIndex;
                      _context9.n = 2;
                      return _this.getBinArray({
                        binArrayIndex: resultIndex,
                        pair: pair,
                        payer: payer
                      });
                    case 2:
                      binArrayLower = _context9.v;
                      _context9.n = 3;
                      return _this.getBinArray({
                        binArrayIndex: resultIndex + 1,
                        pair: pair,
                        payer: payer
                      });
                    case 3:
                      binArrayUpper = _context9.v;
                      tx = new Transaction();
                      tx.add(ComputeBudgetProgram.setComputeUnitLimit({
                        units: CCU_LIMIT
                      }));
                      tx.add(ComputeBudgetProgram.setComputeUnitPrice({
                        microLamports: unitPrice
                      }));
                      positionVault = getAssociatedTokenAddressSync(new PublicKey(positionMint), payer, true, TOKEN_2022_PROGRAM_ID);
                      _t2 = cloneDeep;
                      _context9.n = 4;
                      return _this.getBinsReserveInformation({
                        position: new PublicKey(position),
                        pair: pair,
                        payer: payer
                      });
                    case 4:
                      _t3 = _context9.v;
                      reserveXY = _t2(_t3);
                      hookBinArrayLower = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_array")), hook.toBuffer(), new BN(BIN_ARRAY_INDEX).toArrayLike(Buffer$1, "le", 4)], _this.hooksProgram.programId)[0];
                      hookBinArrayUpper = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_array")), hook.toBuffer(), new BN(BIN_ARRAY_INDEX + 1).toArrayLike(Buffer$1, "le", 4)], _this.hooksProgram.programId)[0];
                      hookPosition = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("position")), hook.toBuffer(), new PublicKey(position).toBuffer()], _this.hooksProgram.programId)[0];
                      removedShares = [];
                      if (type === "removeBoth") {
                        removedShares = reserveXY.map(function (reserve) {
                          var binId = reserve.binId;
                          if (binId >= Number(start) && binId <= Number(end)) {
                            return reserve.liquidityShare;
                          }
                          return new BN(0);
                        });
                      }
                      if (type === "removeBaseToken") {
                        removedShares = reserveXY.map(function (reserve) {
                          if (reserve.reserveX && reserve.reserveY === 0) {
                            return reserve.liquidityShare;
                          }
                          return new BN(0);
                        });
                      }
                      if (type === "removeQuoteToken") {
                        removedShares = reserveXY.map(function (reserve) {
                          if (reserve.reserveY && reserve.reserveX === 0) {
                            return reserve.liquidityShare;
                          }
                          return new BN(0);
                        });
                      }
                      availableShares = reserveXY.filter(function (item) {
                        return type === "removeBoth" ? !new BN(item.liquidityShare).eq(new BN(0)) : type === "removeQuoteToken" ? !item.reserveX : !item.reserveY;
                      });
                      isClosePosition = type === "removeBoth" && end - start + 1 >= availableShares.length || end - start + 1 === FIXED_LENGTH && availableShares.length === FIXED_LENGTH;
                      if (!isClosePosition) {
                        _context9.n = 6;
                        break;
                      }
                      _context9.n = 5;
                      return _this.lbProgram.methods.closePosition().accountsPartial({
                        pair: pair,
                        position: position,
                        binArrayLower: binArrayLower,
                        binArrayUpper: binArrayUpper,
                        tokenVaultX: associatedPairVaultX,
                        tokenVaultY: associatedPairVaultY,
                        userVaultX: associatedUserVaultX,
                        userVaultY: associatedUserVaultY,
                        positionTokenAccount: positionVault,
                        tokenMintX: tokenMintX,
                        tokenMintY: tokenMintY,
                        tokenProgramX: tokenProgramX,
                        tokenProgramY: tokenProgramY,
                        positionTokenProgram: TOKEN_2022_PROGRAM_ID,
                        hook: hook,
                        hooksProgram: _this.hooksProgram.programId,
                        user: payer,
                        positionMint: positionMint
                      }).instruction();
                    case 5:
                      instructions = _context9.v;
                      positionClosed.push({
                        position: position
                      });
                      tx.add(instructions);
                      _context9.n = 8;
                      break;
                    case 6:
                      _context9.n = 7;
                      return (_this$lbProgram$metho = _this.lbProgram.methods.decreasePosition(removedShares).accountsPartial({
                        pair: pair,
                        position: position,
                        binArrayLower: binArrayLower,
                        binArrayUpper: binArrayUpper,
                        tokenVaultX: associatedPairVaultX,
                        tokenVaultY: associatedPairVaultY,
                        userVaultX: associatedUserVaultX,
                        userVaultY: associatedUserVaultY,
                        positionTokenAccount: positionVault,
                        tokenMintX: tokenMintX,
                        tokenMintY: tokenMintY,
                        tokenProgramX: tokenProgramX,
                        tokenProgramY: tokenProgramY,
                        positionTokenProgram: TOKEN_2022_PROGRAM_ID,
                        hook: hook,
                        hooksProgram: _this.hooksProgram.programId,
                        user: payer,
                        positionMint: positionMint
                      })) == null ? void 0 : _this$lbProgram$metho.remainingAccounts([{
                        pubkey: pair,
                        isWritable: false,
                        isSigner: false
                      }, {
                        pubkey: binArrayLower,
                        isWritable: false,
                        isSigner: false
                      }, {
                        pubkey: binArrayUpper,
                        isWritable: false,
                        isSigner: false
                      }, {
                        pubkey: hookBinArrayLower,
                        isWritable: true,
                        isSigner: false
                      }, {
                        pubkey: hookBinArrayUpper,
                        isWritable: true,
                        isSigner: false
                      }, {
                        pubkey: hookPosition,
                        isWritable: true,
                        isSigner: false
                      }]).instruction();
                    case 7:
                      _instructions = _context9.v;
                      tx.add(_instructions);
                    case 8:
                      return _context9.a(2, tx);
                  }
                }, _callee9);
              }));
              return function (_x0) {
                return _ref2.apply(this, arguments);
              };
            }()));
          case 9:
            txs = _context0.v;
            txCloseAccount = new Transaction();
            if (tokenMintY.toString() === WRAP_SOL_ADDRESS || tokenMintX.toString() === WRAP_SOL_ADDRESS) {
              isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;
              associatedUserVault = isNativeY ? associatedUserVaultY : associatedUserVaultX;
              txCloseAccount.add(createCloseAccountInstruction(associatedUserVault, payer, payer));
            }
            return _context0.a(2, {
              txs: txs,
              txCreateAccount: txCreateAccount.instructions.length ? txCreateAccount : undefined,
              txCloseAccount: txCloseAccount.instructions.length ? txCloseAccount : undefined,
              positionClosed: positionClosed
            });
        }
      }, _callee0, this);
    }));
    function removeMultipleLiquidity(_x9) {
      return _removeMultipleLiquidity.apply(this, arguments);
    }
    return removeMultipleLiquidity;
  }();
  _proto.swap = /*#__PURE__*/function () {
    var _swap = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee10(params) {
      var _this2 = this;
      var tokenMintX, tokenMintY, amount, otherAmountOffset, swapForY, isExactInput, pair, payer, pairInfo, currentBinArrayIndex, surroundingIndexes, binArrayAddresses, binArrayAccountsInfo, validIndexes, binArrayLowerIndex, binArrayUpperIndex, activeOffset, first, second, third, _ref4, binArrayLower, binArrayUpper, _yield$Promise$all, tokenProgramX, tokenProgramY, latestBlockHash, tx, associatedPairVaultX, associatedPairVaultY, associatedUserVaultX, associatedUserVaultY, infoUserVaultX, userVaultXInstructions, infoUserVaultY, userVaultYInstructions, remainingAccounts, hookBinArrayLower, hookBinArrayUpper, isNativeY, associatedUserVault, swapInstructions, _isNativeY, _associatedUserVault;
      return _regenerator().w(function (_context10) {
        while (1) switch (_context10.n) {
          case 0:
            tokenMintX = params.tokenMintX, tokenMintY = params.tokenMintY, amount = params.amount, otherAmountOffset = params.otherAmountOffset, swapForY = params.swapForY, isExactInput = params.isExactInput, pair = params.pair, payer = params.payer;
            _context10.n = 1;
            return this.getPairAccount(pair);
          case 1:
            pairInfo = _context10.v;
            if (pairInfo) {
              _context10.n = 2;
              break;
            }
            throw new Error("Pair not found");
          case 2:
            currentBinArrayIndex = Math.floor(pairInfo.activeId / BIN_ARRAY_SIZE);
            surroundingIndexes = [currentBinArrayIndex - 1, currentBinArrayIndex, currentBinArrayIndex + 1];
            _context10.n = 3;
            return Promise.all(surroundingIndexes.map(/*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee1(idx) {
                return _regenerator().w(function (_context1) {
                  while (1) switch (_context1.n) {
                    case 0:
                      _context1.n = 1;
                      return _this2.getBinArray({
                        binArrayIndex: idx,
                        pair: pair,
                        payer: payer
                      });
                    case 1:
                      return _context1.a(2, _context1.v);
                  }
                }, _callee1);
              }));
              return function (_x10) {
                return _ref3.apply(this, arguments);
              };
            }()));
          case 3:
            binArrayAddresses = _context10.v;
            _context10.n = 4;
            return this.connection.getMultipleAccountsInfo(binArrayAddresses);
          case 4:
            binArrayAccountsInfo = _context10.v;
            validIndexes = surroundingIndexes.filter(function (_, i) {
              return binArrayAccountsInfo[i];
            });
            if (!(validIndexes.length < 2)) {
              _context10.n = 5;
              break;
            }
            throw new Error("No valid bin arrays found for the pair");
          case 5:
            if (validIndexes.length === 2) {
              binArrayLowerIndex = validIndexes[0];
              binArrayUpperIndex = validIndexes[1];
            } else {
              activeOffset = pairInfo.activeId % BIN_ARRAY_SIZE;
              first = validIndexes[0], second = validIndexes[1], third = validIndexes[2];
              _ref4 = activeOffset < BIN_ARRAY_SIZE / 2 ? [first, second] : [second, third];
              binArrayLowerIndex = _ref4[0];
              binArrayUpperIndex = _ref4[1];
            }
            _context10.n = 6;
            return this.getBinArray({
              pair: pair,
              binArrayIndex: binArrayLowerIndex,
              payer: payer
            });
          case 6:
            binArrayLower = _context10.v;
            _context10.n = 7;
            return this.getBinArray({
              pair: pair,
              binArrayIndex: binArrayUpperIndex,
              payer: payer
            });
          case 7:
            binArrayUpper = _context10.v;
            _context10.n = 8;
            return Promise.all([getProgram(tokenMintX, this.connection), getProgram(tokenMintY, this.connection)]);
          case 8:
            _yield$Promise$all = _context10.v;
            tokenProgramX = _yield$Promise$all[0];
            tokenProgramY = _yield$Promise$all[1];
            _context10.n = 9;
            return this.connection.getLatestBlockhash();
          case 9:
            latestBlockHash = _context10.v;
            tx = new Transaction({
              feePayer: payer,
              blockhash: latestBlockHash.blockhash,
              lastValidBlockHeight: latestBlockHash.lastValidBlockHeight
            });
            associatedPairVaultX = getAssociatedTokenAddressSync(tokenMintX, pair, true, tokenProgramX);
            associatedPairVaultY = getAssociatedTokenAddressSync(tokenMintY, pair, true, tokenProgramY);
            associatedUserVaultX = getAssociatedTokenAddressSync(tokenMintX, payer, true, tokenProgramX);
            associatedUserVaultY = getAssociatedTokenAddressSync(tokenMintY, payer, true, tokenProgramY);
            _context10.n = 10;
            return this.connection.getAccountInfo(associatedUserVaultX);
          case 10:
            infoUserVaultX = _context10.v;
            if (!infoUserVaultX) {
              userVaultXInstructions = createAssociatedTokenAccountInstruction(payer, associatedUserVaultX, payer, tokenMintX, tokenProgramX);
              tx.add(userVaultXInstructions);
            }
            _context10.n = 11;
            return this.connection.getAccountInfo(associatedUserVaultY);
          case 11:
            infoUserVaultY = _context10.v;
            if (!infoUserVaultY) {
              userVaultYInstructions = createAssociatedTokenAccountInstruction(payer, associatedUserVaultY, payer, tokenMintY, tokenProgramY);
              tx.add(userVaultYInstructions);
            }
            remainingAccounts = [{
              pubkey: pair,
              isWritable: false,
              isSigner: false
            }, {
              pubkey: binArrayLower,
              isWritable: false,
              isSigner: false
            }, {
              pubkey: binArrayUpper,
              isWritable: false,
              isSigner: false
            }];
            if (!!pairInfo.hook) {
              hookBinArrayLower = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_array")), pairInfo.hook.toBuffer(), new BN(binArrayLowerIndex).toArrayLike(Buffer$1, "le", 4)], this.hooksProgram.programId)[0];
              hookBinArrayUpper = PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("bin_array")), pairInfo.hook.toBuffer(), new BN(binArrayUpperIndex).toArrayLike(Buffer$1, "le", 4)], this.hooksProgram.programId)[0];
              remainingAccounts = [{
                pubkey: hookBinArrayLower,
                isWritable: true,
                isSigner: false
              }, {
                pubkey: hookBinArrayUpper,
                isWritable: true,
                isSigner: false
              }, {
                pubkey: pair,
                isWritable: false,
                isSigner: false
              }, {
                pubkey: hookBinArrayLower,
                isWritable: true,
                isSigner: false
              }, {
                pubkey: hookBinArrayUpper,
                isWritable: true,
                isSigner: false
              }];
            }
            if (tokenMintY.toString() === WRAP_SOL_ADDRESS || tokenMintX.toString() === WRAP_SOL_ADDRESS) {
              isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;
              associatedUserVault = isNativeY ? associatedUserVaultY : associatedUserVaultX;
              if (isNativeY && !swapForY) {
                tx.add(SystemProgram.transfer({
                  fromPubkey: payer,
                  toPubkey: associatedUserVault,
                  lamports: amount
                }));
                tx.add(createSyncNativeInstruction(associatedUserVault));
              }
              if (!isNativeY && swapForY) {
                tx.add(SystemProgram.transfer({
                  fromPubkey: payer,
                  toPubkey: associatedUserVault,
                  lamports: amount
                }));
                tx.add(createSyncNativeInstruction(associatedUserVault));
              }
            }
            _context10.n = 12;
            return this.lbProgram.methods.swap(new BN(amount.toString()), new BN(otherAmountOffset.toString()), swapForY, isExactInput ? {
              exactInput: {}
            } : {
              exactOutput: {}
            }).accountsPartial({
              pair: pair,
              binArrayLower: binArrayLower,
              binArrayUpper: binArrayUpper,
              tokenVaultX: associatedPairVaultX,
              tokenVaultY: associatedPairVaultY,
              userVaultX: associatedUserVaultX,
              userVaultY: associatedUserVaultY,
              tokenMintX: tokenMintX,
              tokenMintY: tokenMintY,
              tokenProgramX: tokenProgramX,
              tokenProgramY: tokenProgramY,
              user: payer,
              hook: pairInfo.hook || null,
              hooksProgram: this.hooksProgram.programId
            }).remainingAccounts(remainingAccounts).instruction();
          case 12:
            swapInstructions = _context10.v;
            tx.add(swapInstructions);
            if (tokenMintY.toString() === WRAP_SOL_ADDRESS || tokenMintX.toString() === WRAP_SOL_ADDRESS) {
              _isNativeY = tokenMintY.toString() === WRAP_SOL_ADDRESS;
              _associatedUserVault = _isNativeY ? associatedUserVaultY : associatedUserVaultX;
              if (_isNativeY && swapForY || !_isNativeY && !swapForY) {
                tx.add(createCloseAccountInstruction(_associatedUserVault, payer, payer));
              }
            }
            return _context10.a(2, tx);
        }
      }, _callee10, this);
    }));
    function swap(_x1) {
      return _swap.apply(this, arguments);
    }
    return swap;
  }();
  _proto.getQuote = /*#__PURE__*/function () {
    var _getQuote = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee11(params) {
      var data, amountIn, amountOut, slippageFraction, slippageScaled, maxAmountIn, minAmountOut, _yield$this$getMaxAmo, maxAmountOut, priceImpact, _t4;
      return _regenerator().w(function (_context11) {
        while (1) switch (_context11.n) {
          case 0:
            _context11.p = 0;
            _context11.n = 1;
            return LBSwapService.fromLbConfig(this.lbProgram, this.connection).calculateInOutAmount(params);
          case 1:
            data = _context11.v;
            amountIn = data.amountIn, amountOut = data.amountOut;
            slippageFraction = params.slippage / 100;
            slippageScaled = Math.round(slippageFraction * PRECISION);
            maxAmountIn = amountIn;
            minAmountOut = amountOut;
            if (params.isExactInput) {
              minAmountOut = amountOut * BigInt(PRECISION - slippageScaled) / BigInt(PRECISION);
            } else {
              // max mount in should div for slippage
              maxAmountIn = amountIn * BigInt(PRECISION) / BigInt(PRECISION - slippageScaled);
            }
            _context11.n = 2;
            return this.getMaxAmountOutWithFee(params.pair, Number(amountIn.toString()), params.swapForY, params.tokenBaseDecimal, params.tokenQuoteDecimal);
          case 2:
            _yield$this$getMaxAmo = _context11.v;
            maxAmountOut = _yield$this$getMaxAmo.maxAmountOut;
            priceImpact = new bigDecimal(amountOut).subtract(new bigDecimal(maxAmountOut)).divide(new bigDecimal(maxAmountOut)).multiply(new bigDecimal(100)).getValue();
            return _context11.a(2, {
              amountIn: amountIn,
              amountOut: amountOut,
              amount: params.isExactInput ? maxAmountIn : minAmountOut,
              otherAmountOffset: params.isExactInput ? minAmountOut : maxAmountIn,
              priceImpact: Number(priceImpact)
            });
          case 3:
            _context11.p = 3;
            _t4 = _context11.v;
            throw _t4;
          case 4:
            return _context11.a(2);
        }
      }, _callee11, this, [[0, 3]]);
    }));
    function getQuote(_x11) {
      return _getQuote.apply(this, arguments);
    }
    return getQuote;
  }();
  _proto.getMaxAmountOutWithFee = /*#__PURE__*/function () {
    var _getMaxAmountOutWithFee = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee12(pairAddress, amount, swapForY, decimalBase, decimalQuote) {
      var amountIn, pair, activeId, binStep, swapService, feePrice, activePrice, price, feeAmount, maxAmountOut;
      return _regenerator().w(function (_context12) {
        while (1) switch (_context12.n) {
          case 0:
            if (swapForY === void 0) {
              swapForY = false;
            }
            if (decimalBase === void 0) {
              decimalBase = 9;
            }
            if (decimalQuote === void 0) {
              decimalQuote = 9;
            }
            _context12.p = 1;
            amountIn = BigInt(amount);
            _context12.n = 2;
            return this.getPairAccount(pairAddress);
          case 2:
            pair = _context12.v;
            activeId = pair == null ? void 0 : pair.activeId;
            binStep = pair == null ? void 0 : pair.binStep;
            swapService = LBSwapService.fromLbConfig(this.lbProgram, this.connection);
            feePrice = swapService.getTotalFee(pair);
            activePrice = getPriceFromId(binStep, activeId, 9, 9);
            price = getPriceFromId(binStep, activeId, decimalBase, decimalQuote);
            feeAmount = swapService.getFeeAmount(amountIn, feePrice);
            amountIn = BigInt(amountIn) - BigInt(feeAmount); // new BN(amountIn).subtract(new BN(feeAmount));
            maxAmountOut = swapForY ? mulShr(Number(amountIn.toString()), activePrice, SCALE_OFFSET, "down") : shlDiv(Number(amountIn.toString()), activePrice, SCALE_OFFSET, "down");
            return _context12.a(2, {
              maxAmountOut: maxAmountOut,
              price: price
            });
          case 3:
            _context12.p = 3;
            return _context12.a(2, {
              maxAmountOut: 0,
              price: 0
            });
        }
      }, _callee12, this, [[1, 3]]);
    }));
    function getMaxAmountOutWithFee(_x12, _x13, _x14, _x15, _x16) {
      return _getMaxAmountOutWithFee.apply(this, arguments);
    }
    return getMaxAmountOutWithFee;
  }();
  _proto.getDexName = function getDexName() {
    return "Saros DLMM";
  };
  _proto.getDexProgramId = function getDexProgramId() {
    return this.lbProgram.programId;
  };
  _proto.fetchPoolAddresses = /*#__PURE__*/function () {
    var _fetchPoolAddresses = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee13() {
      var programId, connection, pairAccount, pairAccountDiscriminator, accounts, poolAdresses;
      return _regenerator().w(function (_context13) {
        while (1) switch (_context13.n) {
          case 0:
            programId = this.getDexProgramId();
            connection = this.connection;
            pairAccount = LiquidityBookIDL.accounts.find(function (acc) {
              return acc.name === "Pair";
            });
            pairAccountDiscriminator = pairAccount ? pairAccount.discriminator : undefined;
            if (pairAccountDiscriminator) {
              _context13.n = 1;
              break;
            }
            throw new Error("Pair account not found");
          case 1:
            _context13.n = 2;
            return connection.getProgramAccounts(new PublicKey(programId), {
              filters: [{
                memcmp: {
                  offset: 0,
                  bytes: bs58.encode(pairAccountDiscriminator)
                }
              }]
            });
          case 2:
            accounts = _context13.v;
            if (!(accounts.length === 0)) {
              _context13.n = 3;
              break;
            }
            throw new Error("Pair not found");
          case 3:
            poolAdresses = accounts.reduce(function (addresses, account) {
              if (account.account.owner.toString() !== programId.toString()) {
                return addresses;
              }
              if (account.account.data.length < 8) {
                return addresses;
              }
              addresses.push(account.pubkey.toString());
              return addresses;
            }, []);
            return _context13.a(2, poolAdresses);
        }
      }, _callee13, this);
    }));
    function fetchPoolAddresses() {
      return _fetchPoolAddresses.apply(this, arguments);
    }
    return fetchPoolAddresses;
  }();
  _proto.getUserPositions = /*#__PURE__*/function () {
    var _getUserPositions = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee15(_ref5) {
      var _this3 = this;
      var payer, pair, connection, tokenAccounts, positionMints, positions;
      return _regenerator().w(function (_context15) {
        while (1) switch (_context15.n) {
          case 0:
            payer = _ref5.payer, pair = _ref5.pair;
            connection = this.connection;
            _context15.n = 1;
            return connection.getParsedTokenAccountsByOwner(payer, {
              programId: TOKEN_2022_PROGRAM_ID
            });
          case 1:
            tokenAccounts = _context15.v;
            positionMints = tokenAccounts.value.filter(function (acc) {
              var amount = acc.account.data.parsed.info.tokenAmount.uiAmount;
              // Only interested in NFTs or position tokens with amount > 0
              return amount && amount > 0;
            }).map(function (acc) {
              return new PublicKey(acc.account.data.parsed.info.mint);
            });
            _context15.n = 2;
            return Promise.all(positionMints.map(/*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee14(mint) {
                var _yield$PublicKey$find, positionPda, accountInfo, position;
                return _regenerator().w(function (_context14) {
                  while (1) switch (_context14.n) {
                    case 0:
                      _context14.n = 1;
                      return PublicKey.findProgramAddressSync([Buffer$1.from(utils.bytes.utf8.encode("position")), mint.toBuffer()], _this3.lbProgram.programId);
                    case 1:
                      _yield$PublicKey$find = _context14.v;
                      positionPda = _yield$PublicKey$find[0];
                      _context14.p = 2;
                      _context14.n = 3;
                      return connection.getAccountInfo(positionPda);
                    case 3:
                      accountInfo = _context14.v;
                      if (accountInfo) {
                        _context14.n = 4;
                        break;
                      }
                      return _context14.a(2, null);
                    case 4:
                      _context14.n = 5;
                      return _this3.lbProgram.account.position.fetch(positionPda);
                    case 5:
                      position = _context14.v;
                      if (!(position.pair.toString() !== pair.toString())) {
                        _context14.n = 6;
                        break;
                      }
                      return _context14.a(2, null);
                    case 6:
                      return _context14.a(2, _extends({}, position, {
                        position: positionPda.toString()
                      }));
                    case 7:
                      _context14.p = 7;
                      return _context14.a(2, null);
                  }
                }, _callee14, null, [[2, 7]]);
              }));
              return function (_x18) {
                return _ref6.apply(this, arguments);
              };
            }()));
          case 2:
            positions = _context15.v;
            return _context15.a(2, positions.filter(Boolean));
        }
      }, _callee15, this);
    }));
    function getUserPositions(_x17) {
      return _getUserPositions.apply(this, arguments);
    }
    return getUserPositions;
  }();
  _proto.quote = /*#__PURE__*/function () {
    var _quote = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee16(params) {
      var amount, metadata, optional;
      return _regenerator().w(function (_context16) {
        while (1) switch (_context16.n) {
          case 0:
            amount = params.amount, metadata = params.metadata, optional = params.optional;
            _context16.n = 1;
            return this.getQuote({
              amount: BigInt(amount),
              isExactInput: optional.isExactInput,
              pair: new PublicKey(metadata.poolAddress),
              slippage: optional.slippage,
              swapForY: optional.swapForY,
              tokenBase: new PublicKey(metadata.baseMint),
              tokenBaseDecimal: metadata.extra.tokenBaseDecimal,
              tokenQuote: new PublicKey(metadata.quoteMint),
              tokenQuoteDecimal: metadata.extra.tokenQuoteDecimal
            });
          case 1:
            return _context16.a(2, _context16.v);
        }
      }, _callee16, this);
    }));
    function quote(_x19) {
      return _quote.apply(this, arguments);
    }
    return quote;
  }();
  _proto.fetchPoolMetadata = /*#__PURE__*/function () {
    var _fetchPoolMetadata = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee17(pair) {
      var _pairInfo$hook;
      var connection, pairInfo, basePairVault, quotePairVault, _yield$Promise$all2, baseReserve, quoteReserve;
      return _regenerator().w(function (_context17) {
        while (1) switch (_context17.n) {
          case 0:
            connection = this.connection; //@ts-ignore
            _context17.n = 1;
            return this.lbProgram.account.pair.fetch(new PublicKey(pair));
          case 1:
            pairInfo = _context17.v;
            if (pairInfo) {
              _context17.n = 2;
              break;
            }
            throw new Error("Pair not found");
          case 2:
            _context17.n = 3;
            return this.getPairVaultInfo({
              tokenAddress: new PublicKey(pairInfo.tokenMintX),
              pair: new PublicKey(pair)
            });
          case 3:
            basePairVault = _context17.v;
            _context17.n = 4;
            return this.getPairVaultInfo({
              tokenAddress: new PublicKey(pairInfo.tokenMintY),
              pair: new PublicKey(pair)
            });
          case 4:
            quotePairVault = _context17.v;
            _context17.n = 5;
            return Promise.all([connection.getTokenAccountBalance(basePairVault)["catch"](function () {
              return {
                value: {
                  uiAmount: 0,
                  amount: "0",
                  decimals: 0,
                  uiAmountString: "0"
                }
              };
            }), connection.getTokenAccountBalance(quotePairVault)["catch"](function () {
              return {
                value: {
                  uiAmount: 0,
                  amount: "0",
                  decimals: 0,
                  uiAmountString: "0"
                }
              };
            })]);
          case 5:
            _yield$Promise$all2 = _context17.v;
            baseReserve = _yield$Promise$all2[0];
            quoteReserve = _yield$Promise$all2[1];
            return _context17.a(2, {
              poolAddress: pair,
              baseMint: pairInfo.tokenMintX.toString(),
              baseReserve: baseReserve.value.amount,
              quoteMint: pairInfo.tokenMintY.toString(),
              quoteReserve: quoteReserve.value.amount,
              tradeFee: pairInfo.staticFeeParameters.baseFactor * pairInfo.binStep / 1e6,
              extra: {
                hook: (_pairInfo$hook = pairInfo.hook) == null ? void 0 : _pairInfo$hook.toString(),
                tokenQuoteDecimal: baseReserve.value.decimals,
                tokenBaseDecimal: quoteReserve.value.decimals
              }
            });
        }
      }, _callee17, this);
    }));
    function fetchPoolMetadata(_x20) {
      return _fetchPoolMetadata.apply(this, arguments);
    }
    return fetchPoolMetadata;
  }();
  _proto.getPairVaultInfo = /*#__PURE__*/function () {
    var _getPairVaultInfo = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee18(params) {
      var tokenAddress, pair, payer, transaction, tokenMint, tokenProgram, associatedPairVault, infoPairVault, pairVaultYInstructions;
      return _regenerator().w(function (_context18) {
        while (1) switch (_context18.n) {
          case 0:
            tokenAddress = params.tokenAddress, pair = params.pair, payer = params.payer, transaction = params.transaction;
            tokenMint = new PublicKey(tokenAddress);
            _context18.n = 1;
            return getProgram(tokenMint, this.connection);
          case 1:
            tokenProgram = _context18.v;
            associatedPairVault = getAssociatedTokenAddressSync(tokenMint, pair, true, tokenProgram);
            if (!(transaction && payer)) {
              _context18.n = 3;
              break;
            }
            _context18.n = 2;
            return this.connection.getAccountInfo(associatedPairVault);
          case 2:
            infoPairVault = _context18.v;
            if (!infoPairVault) {
              pairVaultYInstructions = createAssociatedTokenAccountInstruction(payer, associatedPairVault, pair, tokenMint, tokenProgram);
              transaction.add(pairVaultYInstructions);
            }
          case 3:
            return _context18.a(2, associatedPairVault);
        }
      }, _callee18, this);
    }));
    function getPairVaultInfo(_x21) {
      return _getPairVaultInfo.apply(this, arguments);
    }
    return getPairVaultInfo;
  }();
  _proto.getUserVaultInfo = /*#__PURE__*/function () {
    var _getUserVaultInfo = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee19(params) {
      var tokenAddress, payer, transaction, tokenProgram, associatedUserVault, infoUserVault, userVaultYInstructions;
      return _regenerator().w(function (_context19) {
        while (1) switch (_context19.n) {
          case 0:
            tokenAddress = params.tokenAddress, payer = params.payer, transaction = params.transaction;
            _context19.n = 1;
            return getProgram(tokenAddress, this.connection);
          case 1:
            tokenProgram = _context19.v;
            associatedUserVault = getAssociatedTokenAddressSync(tokenAddress, payer, true, tokenProgram);
            if (!transaction) {
              _context19.n = 3;
              break;
            }
            _context19.n = 2;
            return this.connection.getAccountInfo(associatedUserVault);
          case 2:
            infoUserVault = _context19.v;
            if (!infoUserVault) {
              userVaultYInstructions = createAssociatedTokenAccountInstruction(payer, associatedUserVault, payer, tokenAddress, tokenProgram);
              transaction.add(userVaultYInstructions);
            }
          case 3:
            return _context19.a(2, associatedUserVault);
        }
      }, _callee19, this);
    }));
    function getUserVaultInfo(_x22) {
      return _getUserVaultInfo.apply(this, arguments);
    }
    return getUserVaultInfo;
  }();
  _proto.listenNewPoolAddress = /*#__PURE__*/function () {
    var _listenNewPoolAddress = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee20(postTxFunction) {
      var _this4 = this;
      var LB_PROGRAM_ID;
      return _regenerator().w(function (_context20) {
        while (1) switch (_context20.n) {
          case 0:
            LB_PROGRAM_ID = this.getDexProgramId();
            this.connection.onLogs(LB_PROGRAM_ID, function (logInfo) {
              if (!logInfo.err) {
                var logs = logInfo.logs || [];
                for (var _iterator = _createForOfIteratorHelperLoose(logs), _step; !(_step = _iterator()).done;) {
                  var log = _step.value;
                  if (log.includes("Instruction: InitializePair")) {
                    var signature = logInfo.signature;
                    _this4.getPairAddressFromLogs(signature).then(function (address) {
                      postTxFunction(address);
                    });
                  }
                }
              }
            }, "finalized");
          case 1:
            return _context20.a(2);
        }
      }, _callee20, this);
    }));
    function listenNewPoolAddress(_x23) {
      return _listenNewPoolAddress.apply(this, arguments);
    }
    return listenNewPoolAddress;
  }();
  _proto.getPairAddressFromLogs = /*#__PURE__*/function () {
    var _getPairAddressFromLogs = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee21(signature) {
      var parsedTransaction, compiledMessage, message, instructions, initializePairStruct, initializePairDescrimator, pairAddress, _loop, _iterator2, _step2;
      return _regenerator().w(function (_context22) {
        while (1) switch (_context22.n) {
          case 0:
            _context22.n = 1;
            return this.connection.getTransaction(signature, {
              maxSupportedTransactionVersion: 0
            });
          case 1:
            parsedTransaction = _context22.v;
            if (parsedTransaction) {
              _context22.n = 2;
              break;
            }
            throw new Error("Transaction not found");
          case 2:
            compiledMessage = parsedTransaction.transaction.message;
            message = TransactionMessage.decompile(compiledMessage);
            instructions = message.instructions;
            initializePairStruct = LiquidityBookIDL.instructions.find(function (item) {
              return item.name === "initialize_pair";
            });
            initializePairDescrimator = Buffer$1.from(initializePairStruct.discriminator);
            pairAddress = "";
            _loop = /*#__PURE__*/_regenerator().m(function _loop() {
              var _accounts$find;
              var instruction, descimatorInstruction, accounts;
              return _regenerator().w(function (_context21) {
                while (1) switch (_context21.n) {
                  case 0:
                    instruction = _step2.value;
                    descimatorInstruction = instruction.data.subarray(0, 8);
                    if (descimatorInstruction.equals(initializePairDescrimator)) {
                      _context21.n = 1;
                      break;
                    }
                    return _context21.a(2, 1);
                  case 1:
                    //@ts-ignore
                    accounts = initializePairStruct.accounts.map(function (item, index) {
                      return {
                        name: item.name,
                        address: instruction.keys[index].pubkey.toString()
                      };
                    });
                    pairAddress = ((_accounts$find = accounts.find(function (item) {
                      return item.name === "pair";
                    })) == null ? void 0 : _accounts$find.address) || "";
                  case 2:
                    return _context21.a(2);
                }
              }, _loop);
            });
            _iterator2 = _createForOfIteratorHelperLoose(instructions);
          case 3:
            if ((_step2 = _iterator2()).done) {
              _context22.n = 6;
              break;
            }
            return _context22.d(_regeneratorValues(_loop()), 4);
          case 4:
            if (!_context22.v) {
              _context22.n = 5;
              break;
            }
            return _context22.a(3, 5);
          case 5:
            _context22.n = 3;
            break;
          case 6:
            return _context22.a(2, pairAddress);
        }
      }, _callee21, this);
    }));
    function getPairAddressFromLogs(_x24) {
      return _getPairAddressFromLogs.apply(this, arguments);
    }
    return getPairAddressFromLogs;
  }();
  return _createClass(LiquidityBookServices, [{
    key: "lbConfig",
    get: function get() {
      if (this.mode === MODE.DEVNET) {
        return new PublicKey("BJG6uz2zY2XFG7uomiyi17qqDeYJUnbprGbpyzYN1ncU");
      }
      return new PublicKey("BqPmjcPbAwE7mH23BY8q8VUEN4LSjhLUv41W87GsXVn8");
    }
  }, {
    key: "hooksConfig",
    get: function get() {
      if (this.mode === MODE.DEVNET) {
        return new PublicKey("GN3UN8CtcSvC1VZxgHwfKqXXi642EwNk5K19FupZGMrZ");
      }
      return new PublicKey("DgW5ARD9sU3W6SJqtyJSH3QPivxWt7EMvjER9hfFKWXF");
    }
  }]);
}(LiquidityBookAbstract);

export { ACTIVE_ID, BASE_FACTOR, BASIS_POINT_MAX, BIN_ARRAY_INDEX, BIN_ARRAY_SIZE, BIN_STEP, BIN_STEP_CONFIGS, CCU_LIMIT, CONFIG, DECAY_PERIOD, FILTER_PERIOD, FIXED_LENGTH, LiquidityBookServices, LiquidityShape, MAX_BASIS_POINTS, MAX_VOLATILITY_ACCUMULATOR, MODE, ONE, PRECISION, PROTOCOL_SHARE, REDUCTION_FACTOR, REWARDS_DURATION, REWARDS_PER_SECOND, RemoveLiquidityType, SCALE_OFFSET, START_TIME, UNIT_PRICE_DEFAULT, VARIABLE_FEE_CONTROL, VARIABLE_FEE_PRECISION, WRAP_SOL_ADDRESS, createUniformDistribution, findPosition, getBinRange, getGasPrice, getMaxBinArray, getMaxPosition };
//# sourceMappingURL=dlmm-sdk.esm.js.map
